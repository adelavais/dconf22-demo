/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Drive.v3.Drive;

import Google.Apis.Drive.v3.Data.About;
import Google.Apis.Drive.v3.Data.Change;
import Google.Apis.Drive.v3.Data.ChangeList;
import Google.Apis.Drive.v3.Data.Channel;
import Google.Apis.Drive.v3.Data.Comment;
import Google.Apis.Drive.v3.Data.CommentList;
import Google.Apis.Drive.v3.Data.ContentRestriction;
import Google.Apis.Drive.v3.Data.Drive;
import Google.Apis.Drive.v3.Data.DriveList;
import Google.Apis.Drive.v3.Data.File;
import Google.Apis.Drive.v3.Data.FileList;
import Google.Apis.Drive.v3.Data.GeneratedIds;
import Google.Apis.Drive.v3.Data.Permission;
import Google.Apis.Drive.v3.Data.PermissionList;
import Google.Apis.Drive.v3.Data.Reply;
import Google.Apis.Drive.v3.Data.ReplyList;
import Google.Apis.Drive.v3.Data.Revision;
import Google.Apis.Drive.v3.Data.RevisionList;
import Google.Apis.Drive.v3.Data.StartPageToken;
import Google.Apis.Drive.v3.Data.TeamDrive;
import Google.Apis.Drive.v3.Data.TeamDriveList;
import Google.Apis.Drive.v3.Data.User;

import Google.Apis.Drive.v3.DriveClient;
import Google.Apis.Drive.v3.DriveScopes;
import Google.Apis.Drive.v3.DriveMyNullable: MyNullable;
import Google.Apis.Drive.v3.DriveRequest: DriveRequest;

import requests;
import std.typecons: Nullable;
import std.exception: enforce;
import std.array: replace;

/**
 * Service definition for Drive (v3)
 *
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * For more information about this service, see:
 * https://developers.google.com/drive/
 *
 */
public class Drive {
  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static const string DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   */
   public static const string DEFAULT_SERVICE_PATH = "drive/v3/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   */
  public static const string DEFAULT_BATCH_PATH = "batch/drive/v3";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static const string DEFAULT_BASE_URL = DEFAULT_ROOT_URL ~ DEFAULT_SERVICE_PATH;

  /**
   *
   */
  private DriveClient _client;

  public this(const string credentialsFile, const Scopes _scope) {
    _client = new DriveClient(credentialsFile, _scope);
  }

  /**
   * Authorize a request
   */
  public void initialize
    (RequestT = Request, ResponseT = Response, alias Service)
    (Service!(RequestT, ResponseT) req) {
    req.setOauthToken(_client.getToken);
  }

  public void initialize
    (RequestT = Request, ResponseT = Response, MediaContentType = string, alias Service)
    (Service!(RequestT, ResponseT, MediaContentType) req) {
    req.setOauthToken(_client.getToken);
  }

  /**
   * An accessor for creating requests from the About collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.About.List request = drive.about().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public About about() {
    return new About();
  }

  /**
   * The "about" collection of methods.
   */
  public class About {

    /**
     * Gets information about the user, the user's Drive, and system capabilities.
     *
     * Create a request for the method "about.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)() {
      auto result = new Get!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.About.About, MediaContentType) {
      private static const string REST_PATH = "about";

      /**
       * Gets information about the user, the user's Drive, and system capabilities.
       *
       * Create a request for the method "about.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

    }

  }

  /**
   * An accessor for creating requests from the Changes collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Changes.List request = drive.changes().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Changes changes() {
    return new Changes();
  }

  /**
   * The "changes" collection of methods.
   */
  public class Changes {

    /**
     * Gets the starting pageToken for listing future changes.
     *
     * Create a request for the method "changes.getStartPageToken".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link GetStartPageToken#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto getStartPageToken_(RequestT = Request, ResponseT = Response)() {
      auto result = new GetStartPageToken!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, GetStartPageToken)(result);
      return result;
    }

    public class GetStartPageToken
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.StartPageToken.StartPageToken, MediaContentType) {
      private static const string REST_PATH = "changes/startPageToken";

      /**
       * Gets the starting pageToken for listing future changes.
       *
       * Create a request for the method "changes.getStartPageToken".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link GetStartPageToken#execute()} method to invoke the remote operation.
       * <p> {@link GetStartPageToken#initialize(com.google.api.client.googleapis.services.AbstractGoogl
       * eClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public GetStartPageToken!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(GetStartPageToken!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * The ID of the shared drive for which the starting pageToken for listing future changes from
       * that shared drive is returned.
       */
      private string driveId;

      /** The ID of the shared drive for which the starting pageToken for listing future changes from that
     shared drive is returned.
       */
      public string getDriveId() {
        return driveId;
      }

      /**
       * The ID of the shared drive for which the starting pageToken for listing future changes from
       * that shared drive is returned.
       */
      public GetStartPageToken setDriveId(string driveId) {
        this.driveId = driveId;
        set!(string)("driveId", driveId);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public GetStartPageToken setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public GetStartPageToken setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /** Deprecated use driveId instead. */
      private string teamDriveId;

      /** Deprecated use driveId instead.
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** Deprecated use driveId instead. */
      public GetStartPageToken setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        set!(string)("teamDriveId", teamDriveId);
        return this;
      }

    }
    /**
     * Lists the changes for a user or shared drive.
     *
     * Create a request for the method "changes.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value
     *        of 'nextPageToken' from the previous response or to the response from the
     *        getStartPageToken method.
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)(string pageToken) {
      auto result = new List!(RequestT, ResponseT)(pageToken);
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.ChangeList.ChangeList, MediaContentType) {
      private static const string REST_PATH = "changes";

      /**
       * Lists the changes for a user or shared drive.
       *
       * Create a request for the method "changes.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value
     *        of 'nextPageToken' from the previous response or to the response from the
     *        getStartPageToken method.
       * @since 1.13
       */
      protected this(string pageToken) {
        this.pageToken = enforce(pageToken, "Required parameter pageToken must be specified.");

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response or to the response from the
       * getStartPageToken method.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response or to the response from the
       * getStartPageToken method.
       */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /**
       * The shared drive from which changes are returned. If specified the change IDs will be
       * reflective of the shared drive; use the combined drive ID and change ID as an identifier.
       */
      private string driveId;

      /** The shared drive from which changes are returned. If specified the change IDs will be reflective of
     the shared drive; use the combined drive ID and change ID as an identifier.
       */
      public string getDriveId() {
        return driveId;
      }

      /**
       * The shared drive from which changes are returned. If specified the change IDs will be
       * reflective of the shared drive; use the combined drive ID and change ID as an identifier.
       */
      public List setDriveId(string driveId) {
        this.driveId = driveId;
        set!(string)("driveId", driveId);
        return this;
      }

      /**
       * Whether changes should include the file resource if the file is still accessible by the
       * user at the time of the request, even when a file was removed from the list of changes and
       * there will be no further change entries for this file.
       */
      private Nullable!bool includeCorpusRemovals;

      /** Whether changes should include the file resource if the file is still accessible by the user at the
     time of the request, even when a file was removed from the list of changes and there will be no
     further change entries for this file. [default: false]
       */
      public Nullable!bool getIncludeCorpusRemovals() {
        return includeCorpusRemovals;
      }

      /**
       * Whether changes should include the file resource if the file is still accessible by the
       * user at the time of the request, even when a file was removed from the list of changes and
       * there will be no further change entries for this file.
       */
      public List setIncludeCorpusRemovals(Nullable!bool includeCorpusRemovals) {
        this.includeCorpusRemovals = includeCorpusRemovals;
        set!(Nullable!bool)("includeCorpusRemovals", includeCorpusRemovals);
        return this;
      }

      /** Whether both My Drive and shared drive items should be included in results. */
      private Nullable!bool includeItemsFromAllDrives;

      /** Whether both My Drive and shared drive items should be included in results. [default: false]
       */
      public Nullable!bool getIncludeItemsFromAllDrives() {
        return includeItemsFromAllDrives;
      }

      /** Whether both My Drive and shared drive items should be included in results. */
      public List setIncludeItemsFromAllDrives(Nullable!bool includeItemsFromAllDrives) {
        this.includeItemsFromAllDrives = includeItemsFromAllDrives;
        set!(Nullable!bool)("includeItemsFromAllDrives", includeItemsFromAllDrives);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public List setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /**
       * Whether to include changes indicating that items have been removed from the list of
       * changes, for example by deletion or loss of access.
       */
      private Nullable!bool includeRemoved;

      /** Whether to include changes indicating that items have been removed from the list of changes, for
     example by deletion or loss of access. [default: true]
       */
      public Nullable!bool getIncludeRemoved() {
        return includeRemoved;
      }

      /**
       * Whether to include changes indicating that items have been removed from the list of
       * changes, for example by deletion or loss of access.
       */
      public List setIncludeRemoved(Nullable!bool includeRemoved) {
        this.includeRemoved = includeRemoved;
        set!(Nullable!bool)("includeRemoved", includeRemoved);
        return this;
      }

      /** Deprecated use includeItemsFromAllDrives instead. */
      private Nullable!bool includeTeamDriveItems;

      /** Deprecated use includeItemsFromAllDrives instead. [default: false]
       */
      public Nullable!bool getIncludeTeamDriveItems() {
        return includeTeamDriveItems;
      }

      /** Deprecated use includeItemsFromAllDrives instead. */
      public List setIncludeTeamDriveItems(Nullable!bool includeTeamDriveItems) {
        this.includeTeamDriveItems = includeTeamDriveItems;
        set!(Nullable!bool)("includeTeamDriveItems", includeTeamDriveItems);
        return this;
      }

      /** The maximum number of changes to return per page. */
      private MyNullable!int pageSize;

      /** The maximum number of changes to return per page. [default: 100] [minimum: 1] [maximum: 1000]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** The maximum number of changes to return per page. */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * Whether to restrict the results to changes inside the My Drive hierarchy. This omits
       * changes to files such as those in the Application Data folder or shared files which have
       * not been added to My Drive.
       */
      private Nullable!bool restrictToMyDrive;

      /** Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to
     files such as those in the Application Data folder or shared files which have not been added to My
     Drive. [default: false]
       */
      public Nullable!bool getRestrictToMyDrive() {
        return restrictToMyDrive;
      }

      /**
       * Whether to restrict the results to changes inside the My Drive hierarchy. This omits
       * changes to files such as those in the Application Data folder or shared files which have
       * not been added to My Drive.
       */
      public List setRestrictToMyDrive(Nullable!bool restrictToMyDrive) {
        this.restrictToMyDrive = restrictToMyDrive;
        set!(Nullable!bool)("restrictToMyDrive", restrictToMyDrive);
        return this;
      }

      /**
       * A comma-separated list of spaces to query within the user corpus. Supported values are
       * 'drive', 'appDataFolder' and 'photos'.
       */
      private string spaces;

      /** A comma-separated list of spaces to query within the user corpus. Supported values are 'drive',
     'appDataFolder' and 'photos'. [default: drive]
       */
      public string getSpaces() {
        return spaces;
      }

      /**
       * A comma-separated list of spaces to query within the user corpus. Supported values are
       * 'drive', 'appDataFolder' and 'photos'.
       */
      public List setSpaces(string spaces) {
        this.spaces = spaces;
        set!(string)("spaces", spaces);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public List setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public List setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /** Deprecated use driveId instead. */
      private string teamDriveId;

      /** Deprecated use driveId instead.
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** Deprecated use driveId instead. */
      public List setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        set!(string)("teamDriveId", teamDriveId);
        return this;
      }

    }
    /**
     * Subscribes to changes for a user.
     *
     * Create a request for the method "changes.watch".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Watch#execute()} method to invoke the remote operation.
     *
     * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value
     *        of 'nextPageToken' from the previous response or to the response from the
     *        getStartPageToken method.
     * @param content the {@link Google.Apis.Drive.v3.Data.Channel}
     * @return the request
     */
    public auto watch_(RequestT = Request, ResponseT = Response)(string pageToken, Google.Apis.Drive.v3.Data.Channel.Channel content) {
      auto result = new Watch!(RequestT, ResponseT)(pageToken, content);
      initialize!(RequestT, ResponseT, Watch)(result);
      return result;
    }

    public class Watch
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Channel.Channel, Google.Apis.Drive.v3.Data.Channel.Channel, MediaContentType) {
      private static const string REST_PATH = "changes/watch";

      /**
       * Subscribes to changes for a user.
       *
       * Create a request for the method "changes.watch".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Watch#execute()} method to invoke the remote operation. <p> {@link
       * Watch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param pageToken The token for continuing a previous list request on the next page. This should be set to the value
     *        of 'nextPageToken' from the previous response or to the response from the
     *        getStartPageToken method.
       * @param content the {@link Google.Apis.Drive.v3.Data.Channel}
       * @since 1.13
       */
      protected this(string pageToken, Google.Apis.Drive.v3.Data.Channel.Channel content) {
        this.pageToken = enforce(pageToken, "Required parameter pageToken must be specified.");

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Watch!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response or to the response from the
       * getStartPageToken method.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response or to the response from the getStartPageToken method.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response or to the response from the
       * getStartPageToken method.
       */
      public Watch setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /**
       * The shared drive from which changes are returned. If specified the change IDs will be
       * reflective of the shared drive; use the combined drive ID and change ID as an identifier.
       */
      private string driveId;

      /** The shared drive from which changes are returned. If specified the change IDs will be reflective of
     the shared drive; use the combined drive ID and change ID as an identifier.
       */
      public string getDriveId() {
        return driveId;
      }

      /**
       * The shared drive from which changes are returned. If specified the change IDs will be
       * reflective of the shared drive; use the combined drive ID and change ID as an identifier.
       */
      public Watch setDriveId(string driveId) {
        this.driveId = driveId;
        set!(string)("driveId", driveId);
        return this;
      }

      /**
       * Whether changes should include the file resource if the file is still accessible by the
       * user at the time of the request, even when a file was removed from the list of changes and
       * there will be no further change entries for this file.
       */
      private Nullable!bool includeCorpusRemovals;

      /** Whether changes should include the file resource if the file is still accessible by the user at the
     time of the request, even when a file was removed from the list of changes and there will be no
     further change entries for this file. [default: false]
       */
      public Nullable!bool getIncludeCorpusRemovals() {
        return includeCorpusRemovals;
      }

      /**
       * Whether changes should include the file resource if the file is still accessible by the
       * user at the time of the request, even when a file was removed from the list of changes and
       * there will be no further change entries for this file.
       */
      public Watch setIncludeCorpusRemovals(Nullable!bool includeCorpusRemovals) {
        this.includeCorpusRemovals = includeCorpusRemovals;
        set!(Nullable!bool)("includeCorpusRemovals", includeCorpusRemovals);
        return this;
      }

      /** Whether both My Drive and shared drive items should be included in results. */
      private Nullable!bool includeItemsFromAllDrives;

      /** Whether both My Drive and shared drive items should be included in results. [default: false]
       */
      public Nullable!bool getIncludeItemsFromAllDrives() {
        return includeItemsFromAllDrives;
      }

      /** Whether both My Drive and shared drive items should be included in results. */
      public Watch setIncludeItemsFromAllDrives(Nullable!bool includeItemsFromAllDrives) {
        this.includeItemsFromAllDrives = includeItemsFromAllDrives;
        set!(Nullable!bool)("includeItemsFromAllDrives", includeItemsFromAllDrives);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public Watch setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /**
       * Whether to include changes indicating that items have been removed from the list of
       * changes, for example by deletion or loss of access.
       */
      private Nullable!bool includeRemoved;

      /** Whether to include changes indicating that items have been removed from the list of changes, for
     example by deletion or loss of access. [default: true]
       */
      public Nullable!bool getIncludeRemoved() {
        return includeRemoved;
      }

      /**
       * Whether to include changes indicating that items have been removed from the list of
       * changes, for example by deletion or loss of access.
       */
      public Watch setIncludeRemoved(Nullable!bool includeRemoved) {
        this.includeRemoved = includeRemoved;
        set!(Nullable!bool)("includeRemoved", includeRemoved);
        return this;
      }

      /** Deprecated use includeItemsFromAllDrives instead. */
      private Nullable!bool includeTeamDriveItems;

      /** Deprecated use includeItemsFromAllDrives instead. [default: false]
       */
      public Nullable!bool getIncludeTeamDriveItems() {
        return includeTeamDriveItems;
      }

      /** Deprecated use includeItemsFromAllDrives instead. */
      public Watch setIncludeTeamDriveItems(Nullable!bool includeTeamDriveItems) {
        this.includeTeamDriveItems = includeTeamDriveItems;
        set!(Nullable!bool)("includeTeamDriveItems", includeTeamDriveItems);
        return this;
      }

      /** The maximum number of changes to return per page. */
      private MyNullable!int pageSize;

      /** The maximum number of changes to return per page. [default: 100] [minimum: 1] [maximum: 1000]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** The maximum number of changes to return per page. */
      public Watch setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * Whether to restrict the results to changes inside the My Drive hierarchy. This omits
       * changes to files such as those in the Application Data folder or shared files which have
       * not been added to My Drive.
       */
      private Nullable!bool restrictToMyDrive;

      /** Whether to restrict the results to changes inside the My Drive hierarchy. This omits changes to
     files such as those in the Application Data folder or shared files which have not been added to My
     Drive. [default: false]
       */
      public Nullable!bool getRestrictToMyDrive() {
        return restrictToMyDrive;
      }

      /**
       * Whether to restrict the results to changes inside the My Drive hierarchy. This omits
       * changes to files such as those in the Application Data folder or shared files which have
       * not been added to My Drive.
       */
      public Watch setRestrictToMyDrive(Nullable!bool restrictToMyDrive) {
        this.restrictToMyDrive = restrictToMyDrive;
        set!(Nullable!bool)("restrictToMyDrive", restrictToMyDrive);
        return this;
      }

      /**
       * A comma-separated list of spaces to query within the user corpus. Supported values are
       * 'drive', 'appDataFolder' and 'photos'.
       */
      private string spaces;

      /** A comma-separated list of spaces to query within the user corpus. Supported values are 'drive',
     'appDataFolder' and 'photos'. [default: drive]
       */
      public string getSpaces() {
        return spaces;
      }

      /**
       * A comma-separated list of spaces to query within the user corpus. Supported values are
       * 'drive', 'appDataFolder' and 'photos'.
       */
      public Watch setSpaces(string spaces) {
        this.spaces = spaces;
        set!(string)("spaces", spaces);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Watch setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Watch setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /** Deprecated use driveId instead. */
      private string teamDriveId;

      /** Deprecated use driveId instead.
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** Deprecated use driveId instead. */
      public Watch setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        set!(string)("teamDriveId", teamDriveId);
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Channels collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Channels.List request = drive.channels().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Channels channels() {
    return new Channels();
  }

  /**
   * The "channels" collection of methods.
   */
  public class Channels {

    /**
     * Stop watching resources through this channel
     *
     * Create a request for the method "channels.stop".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Stop#execute()} method to invoke the remote operation.
     *
     * @param content the {@link Google.Apis.Drive.v3.Data.Channel}
     * @return the request
     */
    public auto stop_(RequestT = Request, ResponseT = Response)(Google.Apis.Drive.v3.Data.Channel.Channel content) {
      auto result = new Stop!(RequestT, ResponseT)(content);
      initialize!(RequestT, ResponseT, Stop)(result);
      return result;
    }

    public class Stop
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Channel.Channel, Object, MediaContentType) {
      private static const string REST_PATH = "channels/stop";

      /**
       * Stop watching resources through this channel
       *
       * Create a request for the method "channels.stop".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Stop#execute()} method to invoke the remote operation. <p> {@link
       * Stop#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link Google.Apis.Drive.v3.Data.Channel}
       * @since 1.13
       */
      protected this(Google.Apis.Drive.v3.Data.Channel.Channel content) {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Stop!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Stop!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Stop!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

    }

  }

  /**
   * An accessor for creating requests from the Comments collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Comments.List request = drive.comments().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comments comments() {
    return new Comments();
  }

  /**
   * The "comments" collection of methods.
   */
  public class Comments {

    /**
     * Creates a new comment on a file.
     *
     * Create a request for the method "comments.create".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param content the {@link Google.Apis.Drive.v3.Data.Comment}
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response)(string fileId, Google.Apis.Drive.v3.Data.Comment.Comment content) {
      auto result = new Create!(RequestT, ResponseT)(fileId, content);
      initialize!(RequestT, ResponseT, Create)(result);
      return result;
    }

    public class Create
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Comment.Comment, Google.Apis.Drive.v3.Data.Comment.Comment, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments";

      /**
       * Creates a new comment on a file.
       *
       * Create a request for the method "comments.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param content the {@link Google.Apis.Drive.v3.Data.Comment}
       * @since 1.13
       */
      protected this(string fileId, Google.Apis.Drive.v3.Data.Comment.Comment content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Create setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

    }
    /**
     * Deletes a comment.
     *
     * Create a request for the method "comments.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string fileId, string commentId) {
      auto result = new Delete!(RequestT, ResponseT)(fileId, commentId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}";

      /**
       * Deletes a comment.
       *
       * Create a request for the method "comments.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @since 1.13
       */
      protected this(string fileId, string commentId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Delete setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Delete setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

    }
    /**
     * Gets a comment by ID.
     *
     * Create a request for the method "comments.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string fileId, string commentId) {
      auto result = new Get!(RequestT, ResponseT)(fileId, commentId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.Comment.Comment, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}";

      /**
       * Gets a comment by ID.
       *
       * Create a request for the method "comments.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @since 1.13
       */
      protected this(string fileId, string commentId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Get setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Get setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

      /**
       * Whether to return deleted comments. Deleted comments will not include their original
       * content.
       */
      private Nullable!bool includeDeleted;

      /** Whether to return deleted comments. Deleted comments will not include their original content.
     [default: false]
       */
      public Nullable!bool getIncludeDeleted() {
        return includeDeleted;
      }

      /**
       * Whether to return deleted comments. Deleted comments will not include their original
       * content.
       */
      public Get setIncludeDeleted(Nullable!bool includeDeleted) {
        this.includeDeleted = includeDeleted;
        set!(Nullable!bool)("includeDeleted", includeDeleted);
        return this;
      }

    }
    /**
     * Lists a file's comments.
     *
     * Create a request for the method "comments.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)(string fileId) {
      auto result = new List!(RequestT, ResponseT)(fileId);
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.CommentList.CommentList, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments";

      /**
       * Lists a file's comments.
       *
       * Create a request for the method "comments.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @since 1.13
       */
      protected this(string fileId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public List setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /**
       * Whether to include deleted comments. Deleted comments will not include their original
       * content.
       */
      private Nullable!bool includeDeleted;

      /** Whether to include deleted comments. Deleted comments will not include their original content.
     [default: false]
       */
      public Nullable!bool getIncludeDeleted() {
        return includeDeleted;
      }

      /**
       * Whether to include deleted comments. Deleted comments will not include their original
       * content.
       */
      public List setIncludeDeleted(Nullable!bool includeDeleted) {
        this.includeDeleted = includeDeleted;
        set!(Nullable!bool)("includeDeleted", includeDeleted);
        return this;
      }

      /** The maximum number of comments to return per page. */
      private MyNullable!int pageSize;

      /** The maximum number of comments to return per page. [default: 20] [minimum: 1] [maximum: 100]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** The maximum number of comments to return per page. */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /** The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time). */
      private string startModifiedTime;

      /** The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time).
       */
      public string getStartModifiedTime() {
        return startModifiedTime;
      }

      /** The minimum value of 'modifiedTime' for the result comments (RFC 3339 date-time). */
      public List setStartModifiedTime(string startModifiedTime) {
        this.startModifiedTime = startModifiedTime;
        set!(string)("startModifiedTime", startModifiedTime);
        return this;
      }

    }
    /**
     * Updates a comment with patch semantics.
     *
     * Create a request for the method "comments.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @param content the {@link Google.Apis.Drive.v3.Data.Comment}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string fileId, string commentId, Google.Apis.Drive.v3.Data.Comment.Comment content) {
      auto result = new Update!(RequestT, ResponseT)(fileId, commentId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.Comment.Comment, Google.Apis.Drive.v3.Data.Comment.Comment, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}";

      /**
       * Updates a comment with patch semantics.
       *
       * Create a request for the method "comments.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @param content the {@link Google.Apis.Drive.v3.Data.Comment}
       * @since 1.13
       */
      protected this(string fileId, string commentId, Google.Apis.Drive.v3.Data.Comment.Comment content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Update setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Update setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Drives collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Drives.List request = drive.drives().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Drives drives() {
    return new Drives();
  }

  /**
   * The "drives" collection of methods.
   */
  public class Drives {

    /**
     * Creates a new shared drive.
     *
     * Create a request for the method "drives.create".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param requestId An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation
     *        of a shared drive. A repeated request by the same user and with the same request ID will
     *        avoid creating duplicates by attempting to create the same shared drive. If the shared
     *        drive already exists a 409 error will be returned.
     * @param content the {@link Google.Apis.Drive.v3.Data.Drive}
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response)(string requestId, Google.Apis.Drive.v3.Data.Drive.Drive content) {
      auto result = new Create!(RequestT, ResponseT)(requestId, content);
      initialize!(RequestT, ResponseT, Create)(result);
      return result;
    }

    public class Create
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Drive.Drive, Google.Apis.Drive.v3.Data.Drive.Drive, MediaContentType) {
      private static const string REST_PATH = "drives";

      /**
       * Creates a new shared drive.
       *
       * Create a request for the method "drives.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param requestId An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation
     *        of a shared drive. A repeated request by the same user and with the same request ID will
     *        avoid creating duplicates by attempting to create the same shared drive. If the shared
     *        drive already exists a 409 error will be returned.
       * @param content the {@link Google.Apis.Drive.v3.Data.Drive}
       * @since 1.13
       */
      protected this(string requestId, Google.Apis.Drive.v3.Data.Drive.Drive content) {
        this.requestId = enforce(requestId, "Required parameter requestId must be specified.");

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * An ID, such as a random UUID, which uniquely identifies this user's request for idempotent
       * creation of a shared drive. A repeated request by the same user and with the same request
       * ID will avoid creating duplicates by attempting to create the same shared drive. If the
       * shared drive already exists a 409 error will be returned.
       */
      private string requestId;

      /** An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation
     of a shared drive. A repeated request by the same user and with the same request ID will avoid
     creating duplicates by attempting to create the same shared drive. If the shared drive already
     exists a 409 error will be returned.
       */
      public string getRequestId() {
        return requestId;
      }

      /**
       * An ID, such as a random UUID, which uniquely identifies this user's request for idempotent
       * creation of a shared drive. A repeated request by the same user and with the same request
       * ID will avoid creating duplicates by attempting to create the same shared drive. If the
       * shared drive already exists a 409 error will be returned.
       */
      public Create setRequestId(string requestId) {
        this.requestId = requestId;
        set!(string)("requestId", requestId);
        return this;
      }

    }
    /**
     * Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot
     * contain any untrashed items.
     *
     * Create a request for the method "drives.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param driveId The ID of the shared drive.
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string driveId) {
      auto result = new Delete!(RequestT, ResponseT)(driveId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "drives/{driveId}";

      /**
       * Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot
       * contain any untrashed items.
       *
       * Create a request for the method "drives.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param driveId The ID of the shared drive.
       * @since 1.13
       */
      protected this(string driveId) {
        this.driveId = enforce(driveId, "Required parameter driveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{driveId}", driveId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the shared drive. */
      private string driveId;

      /** The ID of the shared drive.
       */
      public string getDriveId() {
        return driveId;
      }

      /** The ID of the shared drive. */
      public Delete setDriveId(string driveId) {
        this.driveId = driveId;
        return this;
      }

    }
    /**
     * Gets a shared drive's metadata by ID.
     *
     * Create a request for the method "drives.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param driveId The ID of the shared drive.
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string driveId) {
      auto result = new Get!(RequestT, ResponseT)(driveId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.Drive.Drive, MediaContentType) {
      private static const string REST_PATH = "drives/{driveId}";

      /**
       * Gets a shared drive's metadata by ID.
       *
       * Create a request for the method "drives.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param driveId The ID of the shared drive.
       * @since 1.13
       */
      protected this(string driveId) {
        this.driveId = enforce(driveId, "Required parameter driveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{driveId}", driveId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the shared drive. */
      private string driveId;

      /** The ID of the shared drive.
       */
      public string getDriveId() {
        return driveId;
      }

      /** The ID of the shared drive. */
      public Get setDriveId(string driveId) {
        this.driveId = driveId;
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the shared drive
       * belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if they are an administrator of the domain to which the shared drive belongs. [default:
     false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the shared drive
       * belongs.
       */
      public Get setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Hides a shared drive from the default view.
     *
     * Create a request for the method "drives.hide".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Hide#execute()} method to invoke the remote operation.
     *
     * @param driveId The ID of the shared drive.
     * @return the request
     */
    public auto hide_(RequestT = Request, ResponseT = Response)(string driveId) {
      auto result = new Hide!(RequestT, ResponseT)(driveId);
      initialize!(RequestT, ResponseT, Hide)(result);
      return result;
    }

    public class Hide
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Object, Google.Apis.Drive.v3.Data.Drive.Drive, MediaContentType) {
      private static const string REST_PATH = "drives/{driveId}/hide";

      /**
       * Hides a shared drive from the default view.
       *
       * Create a request for the method "drives.hide".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Hide#execute()} method to invoke the remote operation. <p> {@link
       * Hide#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param driveId The ID of the shared drive.
       * @since 1.13
       */
      protected this(string driveId) {
        this.driveId = enforce(driveId, "Required parameter driveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{driveId}", driveId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Hide!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Hide!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Hide!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Hide!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Hide!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Hide!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Hide!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Hide!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the shared drive. */
      private string driveId;

      /** The ID of the shared drive.
       */
      public string getDriveId() {
        return driveId;
      }

      /** The ID of the shared drive. */
      public Hide setDriveId(string driveId) {
        this.driveId = driveId;
        return this;
      }

    }
    /**
     * Lists the user's shared drives.
     *
     * Create a request for the method "drives.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)() {
      auto result = new List!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.DriveList.DriveList, MediaContentType) {
      private static const string REST_PATH = "drives";

      /**
       * Lists the user's shared drives.
       *
       * Create a request for the method "drives.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** Maximum number of shared drives to return. */
      private MyNullable!int pageSize;

      /** Maximum number of shared drives to return. [default: 10] [minimum: 1] [maximum: 100]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** Maximum number of shared drives to return. */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /** Page token for shared drives. */
      private string pageToken;

      /** Page token for shared drives.
       */
      public string getPageToken() {
        return pageToken;
      }

      /** Page token for shared drives. */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /** Query string for searching shared drives. */
      private string q;

      /** Query string for searching shared drives.
       */
      public string getQ() {
        return q;
      }

      /** Query string for searching shared drives. */
      public List setQ(string q) {
        this.q = q;
        set!(string)("q", q);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then all shared drives of the
       * domain in which the requester is an administrator are returned.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then all shared drives of the domain
     in which the requester is an administrator are returned. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then all shared drives of the
       * domain in which the requester is an administrator are returned.
       */
      public List setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Restores a shared drive to the default view.
     *
     * Create a request for the method "drives.unhide".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Unhide#execute()} method to invoke the remote operation.
     *
     * @param driveId The ID of the shared drive.
     * @return the request
     */
    public auto unhide_(RequestT = Request, ResponseT = Response)(string driveId) {
      auto result = new Unhide!(RequestT, ResponseT)(driveId);
      initialize!(RequestT, ResponseT, Unhide)(result);
      return result;
    }

    public class Unhide
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Object, Google.Apis.Drive.v3.Data.Drive.Drive, MediaContentType) {
      private static const string REST_PATH = "drives/{driveId}/unhide";

      /**
       * Restores a shared drive to the default view.
       *
       * Create a request for the method "drives.unhide".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Unhide#execute()} method to invoke the remote operation. <p> {@link
       * Unhide#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param driveId The ID of the shared drive.
       * @since 1.13
       */
      protected this(string driveId) {
        this.driveId = enforce(driveId, "Required parameter driveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{driveId}", driveId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Unhide!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Unhide!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Unhide!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Unhide!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Unhide!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Unhide!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Unhide!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Unhide!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the shared drive. */
      private string driveId;

      /** The ID of the shared drive.
       */
      public string getDriveId() {
        return driveId;
      }

      /** The ID of the shared drive. */
      public Unhide setDriveId(string driveId) {
        this.driveId = driveId;
        return this;
      }

    }
    /**
     * Updates the metadate for a shared drive.
     *
     * Create a request for the method "drives.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param driveId The ID of the shared drive.
     * @param content the {@link Google.Apis.Drive.v3.Data.Drive}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string driveId, Google.Apis.Drive.v3.Data.Drive.Drive content) {
      auto result = new Update!(RequestT, ResponseT)(driveId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.Drive.Drive, Google.Apis.Drive.v3.Data.Drive.Drive, MediaContentType) {
      private static const string REST_PATH = "drives/{driveId}";

      /**
       * Updates the metadate for a shared drive.
       *
       * Create a request for the method "drives.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param driveId The ID of the shared drive.
       * @param content the {@link Google.Apis.Drive.v3.Data.Drive}
       * @since 1.13
       */
      protected this(string driveId, Google.Apis.Drive.v3.Data.Drive.Drive content) {
        this.driveId = enforce(driveId, "Required parameter driveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{driveId}", driveId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the shared drive. */
      private string driveId;

      /** The ID of the shared drive.
       */
      public string getDriveId() {
        return driveId;
      }

      /** The ID of the shared drive. */
      public Update setDriveId(string driveId) {
        this.driveId = driveId;
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the shared drive
       * belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if they are an administrator of the domain to which the shared drive belongs. [default:
     false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the shared drive
       * belongs.
       */
      public Update setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Files collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Files.List request = drive.files().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Files files() {
    return new Files();
  }

  /**
   * The "files" collection of methods.
   */
  public class Files {

    /**
     * Creates a copy of a file and applies any requested updates with patch semantics. Folders cannot
     * be copied.
     *
     * Create a request for the method "files.copy".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Copy#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param content the {@link Google.Apis.Drive.v3.Data.File}
     * @return the request
     */
    public auto copy_(RequestT = Request, ResponseT = Response)(string fileId, Google.Apis.Drive.v3.Data.File.File content) {
      auto result = new Copy!(RequestT, ResponseT)(fileId, content);
      initialize!(RequestT, ResponseT, Copy)(result);
      return result;
    }

    public class Copy
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.File.File, Google.Apis.Drive.v3.Data.File.File, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/copy";

      /**
       * Creates a copy of a file and applies any requested updates with patch semantics. Folders cannot
       * be copied.
       *
       * Create a request for the method "files.copy".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Copy#execute()} method to invoke the remote operation. <p> {@link
       * Copy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param content the {@link Google.Apis.Drive.v3.Data.File}
       * @since 1.13
       */
      protected this(string fileId, Google.Apis.Drive.v3.Data.File.File content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Copy!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Copy!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Copy!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Copy!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Copy!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Copy!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Copy!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Copy!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Copy setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /**
       * Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts
       * instead.
       */
      private Nullable!bool enforceSingleParent;

      /** Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts instead.
     [default: false]
       */
      public Nullable!bool getEnforceSingleParent() {
        return enforceSingleParent;
      }

      /**
       * Deprecated. Copying files into multiple folders is no longer supported. Use shortcuts
       * instead.
       */
      public Copy setEnforceSingleParent(Nullable!bool enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        set!(Nullable!bool)("enforceSingleParent", enforceSingleParent);
        return this;
      }

      /**
       * Whether to ignore the domain's default visibility settings for the created file. Domain
       * administrators can choose to make all uploaded files visible to the domain by default; this
       * parameter bypasses that behavior for the request. Permissions are still inherited from
       * parent folders.
       */
      private Nullable!bool ignoreDefaultVisibility;

      /** Whether to ignore the domain's default visibility settings for the created file. Domain
     administrators can choose to make all uploaded files visible to the domain by default; this
     parameter bypasses that behavior for the request. Permissions are still inherited from parent
     folders. [default: false]
       */
      public Nullable!bool getIgnoreDefaultVisibility() {
        return ignoreDefaultVisibility;
      }

      /**
       * Whether to ignore the domain's default visibility settings for the created file. Domain
       * administrators can choose to make all uploaded files visible to the domain by default; this
       * parameter bypasses that behavior for the request. Permissions are still inherited from
       * parent folders.
       */
      public Copy setIgnoreDefaultVisibility(Nullable!bool ignoreDefaultVisibility) {
        this.ignoreDefaultVisibility = ignoreDefaultVisibility;
        set!(Nullable!bool)("ignoreDefaultVisibility", ignoreDefaultVisibility);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public Copy setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /**
       * Whether to set the 'keepForever' field in the new head revision. This is only applicable to
       * files with binary content in Google Drive. Only 200 revisions for the file can be kept
       * forever. If the limit is reached, try deleting pinned revisions.
       */
      private Nullable!bool keepRevisionForever;

      /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files
     with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the
     limit is reached, try deleting pinned revisions. [default: false]
       */
      public Nullable!bool getKeepRevisionForever() {
        return keepRevisionForever;
      }

      /**
       * Whether to set the 'keepForever' field in the new head revision. This is only applicable to
       * files with binary content in Google Drive. Only 200 revisions for the file can be kept
       * forever. If the limit is reached, try deleting pinned revisions.
       */
      public Copy setKeepRevisionForever(Nullable!bool keepRevisionForever) {
        this.keepRevisionForever = keepRevisionForever;
        set!(Nullable!bool)("keepRevisionForever", keepRevisionForever);
        return this;
      }

      /** A language hint for OCR processing during image import (ISO 639-1 code). */
      private string ocrLanguage;

      /** A language hint for OCR processing during image import (ISO 639-1 code).
       */
      public string getOcrLanguage() {
        return ocrLanguage;
      }

      /** A language hint for OCR processing during image import (ISO 639-1 code). */
      public Copy setOcrLanguage(string ocrLanguage) {
        this.ocrLanguage = ocrLanguage;
        set!(string)("ocrLanguage", ocrLanguage);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Copy setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Copy setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

    }
    /**
     * Creates a new file.
     *
     * Create a request for the method "files.create".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link Google.Apis.Drive.v3.Data.File}
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response)(Google.Apis.Drive.v3.Data.File.File content) {
      auto result = new Create!(RequestT, ResponseT)(content);
      initialize!(RequestT, ResponseT, Create)(result);
      return result;
    }

    /**
     * Creates a new file.
     *
     * Create a request for the method "files.create".
     *
     * This request holds the parameters needed by the the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     *
     * @param content the {@link Google.Apis.Drive.v3.Data.File} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response, MediaContentType = string)(Google.Apis.Drive.v3.Data.File.File content, MediaContentType mediaContent) {
      auto result = new Create!(RequestT, ResponseT, MediaContentType)(content, mediaContent);
      initialize!(RequestT, ResponseT, MediaContentType, Create)(result);
      return result;
    }

    public class Create
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.File.File, Google.Apis.Drive.v3.Data.File.File, MediaContentType) {
      private static const string REST_PATH = "files";

      /**
       * Creates a new file.
       *
       * Create a request for the method "files.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link Google.Apis.Drive.v3.Data.File}
       * @since 1.13
       */
      protected this(Google.Apis.Drive.v3.Data.File.File content) {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      /**
       * Creates a new file.
       *
       * Create a request for the method "files.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       *
       * @param content the {@link Google.Apis.Drive.v3.Data.File} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected this(Google.Apis.Drive.v3.Data.File.File content, MediaContentType mediaContent) {
        string restPath = REST_PATH;
        super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
        this.mediaContent = mediaContent;
        this.content = content;
      }

      override {

        public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** Deprecated. Creating files in multiple folders is no longer supported. */
      private Nullable!bool enforceSingleParent;

      /** Deprecated. Creating files in multiple folders is no longer supported. [default: false]
       */
      public Nullable!bool getEnforceSingleParent() {
        return enforceSingleParent;
      }

      /** Deprecated. Creating files in multiple folders is no longer supported. */
      public Create setEnforceSingleParent(Nullable!bool enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        set!(Nullable!bool)("enforceSingleParent", enforceSingleParent);
        return this;
      }

      /**
       * Whether to ignore the domain's default visibility settings for the created file. Domain
       * administrators can choose to make all uploaded files visible to the domain by default; this
       * parameter bypasses that behavior for the request. Permissions are still inherited from
       * parent folders.
       */
      private Nullable!bool ignoreDefaultVisibility;

      /** Whether to ignore the domain's default visibility settings for the created file. Domain
     administrators can choose to make all uploaded files visible to the domain by default; this
     parameter bypasses that behavior for the request. Permissions are still inherited from parent
     folders. [default: false]
       */
      public Nullable!bool getIgnoreDefaultVisibility() {
        return ignoreDefaultVisibility;
      }

      /**
       * Whether to ignore the domain's default visibility settings for the created file. Domain
       * administrators can choose to make all uploaded files visible to the domain by default; this
       * parameter bypasses that behavior for the request. Permissions are still inherited from
       * parent folders.
       */
      public Create setIgnoreDefaultVisibility(Nullable!bool ignoreDefaultVisibility) {
        this.ignoreDefaultVisibility = ignoreDefaultVisibility;
        set!(Nullable!bool)("ignoreDefaultVisibility", ignoreDefaultVisibility);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public Create setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /**
       * Whether to set the 'keepForever' field in the new head revision. This is only applicable to
       * files with binary content in Google Drive. Only 200 revisions for the file can be kept
       * forever. If the limit is reached, try deleting pinned revisions.
       */
      private Nullable!bool keepRevisionForever;

      /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files
     with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the
     limit is reached, try deleting pinned revisions. [default: false]
       */
      public Nullable!bool getKeepRevisionForever() {
        return keepRevisionForever;
      }

      /**
       * Whether to set the 'keepForever' field in the new head revision. This is only applicable to
       * files with binary content in Google Drive. Only 200 revisions for the file can be kept
       * forever. If the limit is reached, try deleting pinned revisions.
       */
      public Create setKeepRevisionForever(Nullable!bool keepRevisionForever) {
        this.keepRevisionForever = keepRevisionForever;
        set!(Nullable!bool)("keepRevisionForever", keepRevisionForever);
        return this;
      }

      /** A language hint for OCR processing during image import (ISO 639-1 code). */
      private string ocrLanguage;

      /** A language hint for OCR processing during image import (ISO 639-1 code).
       */
      public string getOcrLanguage() {
        return ocrLanguage;
      }

      /** A language hint for OCR processing during image import (ISO 639-1 code). */
      public Create setOcrLanguage(string ocrLanguage) {
        this.ocrLanguage = ocrLanguage;
        set!(string)("ocrLanguage", ocrLanguage);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Create setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Create setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /** Whether to use the uploaded content as indexable text. */
      private Nullable!bool useContentAsIndexableText;

      /** Whether to use the uploaded content as indexable text. [default: false]
       */
      public Nullable!bool getUseContentAsIndexableText() {
        return useContentAsIndexableText;
      }

      /** Whether to use the uploaded content as indexable text. */
      public Create setUseContentAsIndexableText(Nullable!bool useContentAsIndexableText) {
        this.useContentAsIndexableText = useContentAsIndexableText;
        set!(Nullable!bool)("useContentAsIndexableText", useContentAsIndexableText);
        return this;
      }

    }
    /**
     * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs
     * to a shared drive the user must be an organizer on the parent. If the target is a folder, all
     * descendants owned by the user are also deleted.
     *
     * Create a request for the method "files.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string fileId) {
      auto result = new Delete!(RequestT, ResponseT)(fileId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}";

      /**
       * Permanently deletes a file owned by the user without moving it to the trash. If the file
       * belongs to a shared drive the user must be an organizer on the parent. If the target is a
       * folder, all descendants owned by the user are also deleted.
       *
       * Create a request for the method "files.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @since 1.13
       */
      protected this(string fileId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Delete setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /**
       * Deprecated. If an item is not in a shared drive and its last parent is deleted but the item
       * itself is not, the item will be placed under its owner's root.
       */
      private Nullable!bool enforceSingleParent;

      /** Deprecated. If an item is not in a shared drive and its last parent is deleted but the item itself
     is not, the item will be placed under its owner's root. [default: false]
       */
      public Nullable!bool getEnforceSingleParent() {
        return enforceSingleParent;
      }

      /**
       * Deprecated. If an item is not in a shared drive and its last parent is deleted but the item
       * itself is not, the item will be placed under its owner's root.
       */
      public Delete setEnforceSingleParent(Nullable!bool enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        set!(Nullable!bool)("enforceSingleParent", enforceSingleParent);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Delete setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Delete setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

    }
    /**
     * Permanently deletes all of the user's trashed files.
     *
     * Create a request for the method "files.emptyTrash".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link EmptyTrash#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto emptyTrash_(RequestT = Request, ResponseT = Response)() {
      auto result = new EmptyTrash!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, EmptyTrash)(result);
      return result;
    }

    public class EmptyTrash
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/trash";

      /**
       * Permanently deletes all of the user's trashed files.
       *
       * Create a request for the method "files.emptyTrash".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link EmptyTrash#execute()} method to invoke the remote operation. <p>
       * {@link
       * EmptyTrash#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public EmptyTrash!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(EmptyTrash!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * Deprecated. If an item is not in a shared drive and its last parent is deleted but the item
       * itself is not, the item will be placed under its owner's root.
       */
      private Nullable!bool enforceSingleParent;

      /** Deprecated. If an item is not in a shared drive and its last parent is deleted but the item itself
     is not, the item will be placed under its owner's root. [default: false]
       */
      public Nullable!bool getEnforceSingleParent() {
        return enforceSingleParent;
      }

      /**
       * Deprecated. If an item is not in a shared drive and its last parent is deleted but the item
       * itself is not, the item will be placed under its owner's root.
       */
      public EmptyTrash setEnforceSingleParent(Nullable!bool enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        set!(Nullable!bool)("enforceSingleParent", enforceSingleParent);
        return this;
      }

    }
    /**
     * Exports a Google Doc to the requested MIME type and returns the exported content. Please note
     * that the exported content is limited to 10MB.
     *
     * Create a request for the method "files.export".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Export#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param mimeType The MIME type of the format requested for this export.
     * @return the request
     */
    public auto export_(RequestT = Request, ResponseT = Response)(string fileId, string mimeType) {
      auto result = new Export!(RequestT, ResponseT)(fileId, mimeType);
      initialize!(RequestT, ResponseT, Export)(result);
      return result;
    }

    public class Export
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/export";

      /**
       * Exports a Google Doc to the requested MIME type and returns the exported content. Please note
       * that the exported content is limited to 10MB.
       *
       * Create a request for the method "files.export".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Export#execute()} method to invoke the remote operation. <p> {@link
       * Export#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param mimeType The MIME type of the format requested for this export.
       * @since 1.13
       */
      protected this(string fileId, string mimeType) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.mimeType = enforce(mimeType, "Required parameter mimeType must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Export!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Export!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Export!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Export!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Export!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Export!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Export!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Export!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Export setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The MIME type of the format requested for this export. */
      private string mimeType;

      /** The MIME type of the format requested for this export.
       */
      public string getMimeType() {
        return mimeType;
      }

      /** The MIME type of the format requested for this export. */
      public Export setMimeType(string mimeType) {
        this.mimeType = mimeType;
        set!(string)("mimeType", mimeType);
        return this;
      }

    }
    /**
     * Generates a set of file IDs which can be provided in create or copy requests.
     *
     * Create a request for the method "files.generateIds".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link GenerateIds#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto generateIds_(RequestT = Request, ResponseT = Response)() {
      auto result = new GenerateIds!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, GenerateIds)(result);
      return result;
    }

    public class GenerateIds
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.GeneratedIds.GeneratedIds, MediaContentType) {
      private static const string REST_PATH = "files/generateIds";

      /**
       * Generates a set of file IDs which can be provided in create or copy requests.
       *
       * Create a request for the method "files.generateIds".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link GenerateIds#execute()} method to invoke the remote operation. <p>
       * {@link
       * GenerateIds#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public GenerateIds!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public GenerateIds!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public GenerateIds!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public GenerateIds!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public GenerateIds!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public GenerateIds!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public GenerateIds!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(GenerateIds!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The number of IDs to return. */
      private MyNullable!int count;

      /** The number of IDs to return. [default: 10] [minimum: 1] [maximum: 1000]
       */
      public MyNullable!int getCount() {
        return count;
      }

      /** The number of IDs to return. */
      public GenerateIds setCount(MyNullable!int count) {
        this.count = count;
        set!(MyNullable!int)("count", count);
        return this;
      }

      /**
       * The space in which the IDs can be used to create new files. Supported values are 'drive'
       * and 'appDataFolder'.
       */
      private string space;

      /** The space in which the IDs can be used to create new files. Supported values are 'drive' and
     'appDataFolder'. [default: drive]
       */
      public string getSpace() {
        return space;
      }

      /**
       * The space in which the IDs can be used to create new files. Supported values are 'drive'
       * and 'appDataFolder'.
       */
      public GenerateIds setSpace(string space) {
        this.space = space;
        set!(string)("space", space);
        return this;
      }

    }
    /**
     * Gets a file's metadata or content by ID.
     *
     * Create a request for the method "files.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string fileId) {
      auto result = new Get!(RequestT, ResponseT)(fileId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.File.File, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}";

      /**
       * Gets a file's metadata or content by ID.
       *
       * Create a request for the method "files.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @since 1.13
       */
      protected this(string fileId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Get setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /**
       * Whether the user is acknowledging the risk of downloading known malware or other abusive
       * files. This is only applicable when alt=media.
       */
      private Nullable!bool acknowledgeAbuse;

      /** Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     This is only applicable when alt=media. [default: false]
       */
      public Nullable!bool getAcknowledgeAbuse() {
        return acknowledgeAbuse;
      }

      /**
       * Whether the user is acknowledging the risk of downloading known malware or other abusive
       * files. This is only applicable when alt=media.
       */
      public Get setAcknowledgeAbuse(Nullable!bool acknowledgeAbuse) {
        this.acknowledgeAbuse = acknowledgeAbuse;
        set!(Nullable!bool)("acknowledgeAbuse", acknowledgeAbuse);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public Get setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Get setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Get setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

    }
    /**
     * Lists or searches files.
     *
     * Create a request for the method "files.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)() {
      auto result = new List!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.FileList.FileList, MediaContentType) {
      private static const string REST_PATH = "files";

      /**
       * Lists or searches files.
       *
       * Create a request for the method "files.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * Groupings of files to which the query applies. Supported groupings are: 'user' (files
       * created by, opened by, or shared directly with the user), 'drive' (files in the specified
       * shared drive as indicated by the 'driveId'), 'domain' (files shared to the user's domain),
       * and 'allDrives' (A combination of 'user' and 'drive' for all drives where the user is a
       * member). When able, use 'user' or 'drive', instead of 'allDrives', for efficiency.
       */
      private string corpora;

      /** Groupings of files to which the query applies. Supported groupings are: 'user' (files created by,
     opened by, or shared directly with the user), 'drive' (files in the specified shared drive as
     indicated by the 'driveId'), 'domain' (files shared to the user's domain), and 'allDrives' (A
     combination of 'user' and 'drive' for all drives where the user is a member). When able, use 'user'
     or 'drive', instead of 'allDrives', for efficiency.
       */
      public string getCorpora() {
        return corpora;
      }

      /**
       * Groupings of files to which the query applies. Supported groupings are: 'user' (files
       * created by, opened by, or shared directly with the user), 'drive' (files in the specified
       * shared drive as indicated by the 'driveId'), 'domain' (files shared to the user's domain),
       * and 'allDrives' (A combination of 'user' and 'drive' for all drives where the user is a
       * member). When able, use 'user' or 'drive', instead of 'allDrives', for efficiency.
       */
      public List setCorpora(string corpora) {
        this.corpora = corpora;
        set!(string)("corpora", corpora);
        return this;
      }

      /** The source of files to list. Deprecated: use 'corpora' instead. */
      private string corpus;

      /** The source of files to list. Deprecated: use 'corpora' instead.
       */
      public string getCorpus() {
        return corpus;
      }

      /** The source of files to list. Deprecated: use 'corpora' instead. */
      public List setCorpus(string corpus) {
        this.corpus = corpus;
        set!(string)("corpus", corpus);
        return this;
      }

      /** ID of the shared drive to search. */
      private string driveId;

      /** ID of the shared drive to search.
       */
      public string getDriveId() {
        return driveId;
      }

      /** ID of the shared drive to search. */
      public List setDriveId(string driveId) {
        this.driveId = driveId;
        set!(string)("driveId", driveId);
        return this;
      }

      /** Whether both My Drive and shared drive items should be included in results. */
      private Nullable!bool includeItemsFromAllDrives;

      /** Whether both My Drive and shared drive items should be included in results. [default: false]
       */
      public Nullable!bool getIncludeItemsFromAllDrives() {
        return includeItemsFromAllDrives;
      }

      /** Whether both My Drive and shared drive items should be included in results. */
      public List setIncludeItemsFromAllDrives(Nullable!bool includeItemsFromAllDrives) {
        this.includeItemsFromAllDrives = includeItemsFromAllDrives;
        set!(Nullable!bool)("includeItemsFromAllDrives", includeItemsFromAllDrives);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public List setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /** Deprecated use includeItemsFromAllDrives instead. */
      private Nullable!bool includeTeamDriveItems;

      /** Deprecated use includeItemsFromAllDrives instead. [default: false]
       */
      public Nullable!bool getIncludeTeamDriveItems() {
        return includeTeamDriveItems;
      }

      /** Deprecated use includeItemsFromAllDrives instead. */
      public List setIncludeTeamDriveItems(Nullable!bool includeTeamDriveItems) {
        this.includeTeamDriveItems = includeTeamDriveItems;
        set!(Nullable!bool)("includeTeamDriveItems", includeTeamDriveItems);
        return this;
      }

      /**
       * A comma-separated list of sort keys. Valid keys are 'createdTime', 'folder',
       * 'modifiedByMeTime', 'modifiedTime', 'name', 'name_natural', 'quotaBytesUsed', 'recency',
       * 'sharedWithMeTime', 'starred', and 'viewedByMeTime'. Each key sorts ascending by default,
       * but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedTime
       * desc,name. Please note that there is a current limitation for users with approximately one
       * million files in which the requested sort order is ignored.
       */
      private string orderBy;

      /** A comma-separated list of sort keys. Valid keys are 'createdTime', 'folder', 'modifiedByMeTime',
     'modifiedTime', 'name', 'name_natural', 'quotaBytesUsed', 'recency', 'sharedWithMeTime', 'starred',
     and 'viewedByMeTime'. Each key sorts ascending by default, but may be reversed with the 'desc'
     modifier. Example usage: ?orderBy=folder,modifiedTime desc,name. Please note that there is a
     current limitation for users with approximately one million files in which the requested sort order
     is ignored.
       */
      public string getOrderBy() {
        return orderBy;
      }

      /**
       * A comma-separated list of sort keys. Valid keys are 'createdTime', 'folder',
       * 'modifiedByMeTime', 'modifiedTime', 'name', 'name_natural', 'quotaBytesUsed', 'recency',
       * 'sharedWithMeTime', 'starred', and 'viewedByMeTime'. Each key sorts ascending by default,
       * but may be reversed with the 'desc' modifier. Example usage: ?orderBy=folder,modifiedTime
       * desc,name. Please note that there is a current limitation for users with approximately one
       * million files in which the requested sort order is ignored.
       */
      public List setOrderBy(string orderBy) {
        this.orderBy = orderBy;
        set!(string)("orderBy", orderBy);
        return this;
      }

      /**
       * The maximum number of files to return per page. Partial or empty result pages are possible
       * even before the end of the files list has been reached.
       */
      private MyNullable!int pageSize;

      /** The maximum number of files to return per page. Partial or empty result pages are possible even
     before the end of the files list has been reached. [default: 100] [minimum: 1] [maximum: 1000]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of files to return per page. Partial or empty result pages are possible
       * even before the end of the files list has been reached.
       */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /**
       * A query for filtering the file results. See the "Search for Files" guide for supported
       * syntax.
       */
      private string q;

      /** A query for filtering the file results. See the "Search for Files" guide for supported syntax.
       */
      public string getQ() {
        return q;
      }

      /**
       * A query for filtering the file results. See the "Search for Files" guide for supported
       * syntax.
       */
      public List setQ(string q) {
        this.q = q;
        set!(string)("q", q);
        return this;
      }

      /**
       * A comma-separated list of spaces to query within the corpus. Supported values are 'drive',
       * 'appDataFolder' and 'photos'.
       */
      private string spaces;

      /** A comma-separated list of spaces to query within the corpus. Supported values are 'drive',
     'appDataFolder' and 'photos'. [default: drive]
       */
      public string getSpaces() {
        return spaces;
      }

      /**
       * A comma-separated list of spaces to query within the corpus. Supported values are 'drive',
       * 'appDataFolder' and 'photos'.
       */
      public List setSpaces(string spaces) {
        this.spaces = spaces;
        set!(string)("spaces", spaces);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public List setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public List setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /** Deprecated use driveId instead. */
      private string teamDriveId;

      /** Deprecated use driveId instead.
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** Deprecated use driveId instead. */
      public List setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        set!(string)("teamDriveId", teamDriveId);
        return this;
      }

    }
    /**
     * Updates a file's metadata and/or content. This method supports patch semantics.
     *
     * Create a request for the method "files.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param content the {@link Google.Apis.Drive.v3.Data.File}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string fileId, Google.Apis.Drive.v3.Data.File.File content) {
      auto result = new Update!(RequestT, ResponseT)(fileId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    /**
     * Updates a file's metadata and/or content. This method supports patch semantics.
     *
     * Create a request for the method "files.update".
     *
     * This request holds the parameters needed by the the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param fileId The ID of the file.
     * @param content the {@link Google.Apis.Drive.v3.Data.File} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response, MediaContentType = string)(string fileId, Google.Apis.Drive.v3.Data.File.File content, MediaContentType mediaContent) {
      auto result = new Update!(RequestT, ResponseT, MediaContentType)(fileId, content, mediaContent);
      initialize!(RequestT, ResponseT, MediaContentType, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.File.File, Google.Apis.Drive.v3.Data.File.File, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}";

      /**
       * Updates a file's metadata and/or content. This method supports patch semantics.
       *
       * Create a request for the method "files.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param content the {@link Google.Apis.Drive.v3.Data.File}
       * @since 1.13
       */
      protected this(string fileId, Google.Apis.Drive.v3.Data.File.File content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      /**
       * Updates a file's metadata and/or content. This method supports patch semantics.
       *
       * Create a request for the method "files.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param fileId The ID of the file.
       * @param content the {@link Google.Apis.Drive.v3.Data.File} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected this(string fileId, Google.Apis.Drive.v3.Data.File.File content, MediaContentType mediaContent) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_ROOT_URL ~ "upload/" ~ DEFAULT_SERVICE_PATH);
        this.mediaContent = mediaContent;
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Update setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** A comma-separated list of parent IDs to add. */
      private string addParents;

      /** A comma-separated list of parent IDs to add.
       */
      public string getAddParents() {
        return addParents;
      }

      /** A comma-separated list of parent IDs to add. */
      public Update setAddParents(string addParents) {
        this.addParents = addParents;
        set!(string)("addParents", addParents);
        return this;
      }

      /**
       * Deprecated. Adding files to multiple folders is no longer supported. Use shortcuts instead.
       */
      private Nullable!bool enforceSingleParent;

      /** Deprecated. Adding files to multiple folders is no longer supported. Use shortcuts instead.
     [default: false]
       */
      public Nullable!bool getEnforceSingleParent() {
        return enforceSingleParent;
      }

      /**
       * Deprecated. Adding files to multiple folders is no longer supported. Use shortcuts instead.
       */
      public Update setEnforceSingleParent(Nullable!bool enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        set!(Nullable!bool)("enforceSingleParent", enforceSingleParent);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public Update setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /**
       * Whether to set the 'keepForever' field in the new head revision. This is only applicable to
       * files with binary content in Google Drive. Only 200 revisions for the file can be kept
       * forever. If the limit is reached, try deleting pinned revisions.
       */
      private Nullable!bool keepRevisionForever;

      /** Whether to set the 'keepForever' field in the new head revision. This is only applicable to files
     with binary content in Google Drive. Only 200 revisions for the file can be kept forever. If the
     limit is reached, try deleting pinned revisions. [default: false]
       */
      public Nullable!bool getKeepRevisionForever() {
        return keepRevisionForever;
      }

      /**
       * Whether to set the 'keepForever' field in the new head revision. This is only applicable to
       * files with binary content in Google Drive. Only 200 revisions for the file can be kept
       * forever. If the limit is reached, try deleting pinned revisions.
       */
      public Update setKeepRevisionForever(Nullable!bool keepRevisionForever) {
        this.keepRevisionForever = keepRevisionForever;
        set!(Nullable!bool)("keepRevisionForever", keepRevisionForever);
        return this;
      }

      /** A language hint for OCR processing during image import (ISO 639-1 code). */
      private string ocrLanguage;

      /** A language hint for OCR processing during image import (ISO 639-1 code).
       */
      public string getOcrLanguage() {
        return ocrLanguage;
      }

      /** A language hint for OCR processing during image import (ISO 639-1 code). */
      public Update setOcrLanguage(string ocrLanguage) {
        this.ocrLanguage = ocrLanguage;
        set!(string)("ocrLanguage", ocrLanguage);
        return this;
      }

      /** A comma-separated list of parent IDs to remove. */
      private string removeParents;

      /** A comma-separated list of parent IDs to remove.
       */
      public string getRemoveParents() {
        return removeParents;
      }

      /** A comma-separated list of parent IDs to remove. */
      public Update setRemoveParents(string removeParents) {
        this.removeParents = removeParents;
        set!(string)("removeParents", removeParents);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Update setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Update setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /** Whether to use the uploaded content as indexable text. */
      private Nullable!bool useContentAsIndexableText;

      /** Whether to use the uploaded content as indexable text. [default: false]
       */
      public Nullable!bool getUseContentAsIndexableText() {
        return useContentAsIndexableText;
      }

      /** Whether to use the uploaded content as indexable text. */
      public Update setUseContentAsIndexableText(Nullable!bool useContentAsIndexableText) {
        this.useContentAsIndexableText = useContentAsIndexableText;
        set!(Nullable!bool)("useContentAsIndexableText", useContentAsIndexableText);
        return this;
      }

    }
    /**
     * Subscribes to changes to a file
     *
     * Create a request for the method "files.watch".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Watch#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param content the {@link Google.Apis.Drive.v3.Data.Channel}
     * @return the request
     */
    public auto watch_(RequestT = Request, ResponseT = Response)(string fileId, Google.Apis.Drive.v3.Data.Channel.Channel content) {
      auto result = new Watch!(RequestT, ResponseT)(fileId, content);
      initialize!(RequestT, ResponseT, Watch)(result);
      return result;
    }

    public class Watch
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Channel.Channel, Google.Apis.Drive.v3.Data.Channel.Channel, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/watch";

      /**
       * Subscribes to changes to a file
       *
       * Create a request for the method "files.watch".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Watch#execute()} method to invoke the remote operation. <p> {@link
       * Watch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param content the {@link Google.Apis.Drive.v3.Data.Channel}
       * @since 1.13
       */
      protected this(string fileId, Google.Apis.Drive.v3.Data.Channel.Channel content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Watch!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Watch!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Watch!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Watch setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /**
       * Whether the user is acknowledging the risk of downloading known malware or other abusive
       * files. This is only applicable when alt=media.
       */
      private Nullable!bool acknowledgeAbuse;

      /** Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     This is only applicable when alt=media. [default: false]
       */
      public Nullable!bool getAcknowledgeAbuse() {
        return acknowledgeAbuse;
      }

      /**
       * Whether the user is acknowledging the risk of downloading known malware or other abusive
       * files. This is only applicable when alt=media.
       */
      public Watch setAcknowledgeAbuse(Nullable!bool acknowledgeAbuse) {
        this.acknowledgeAbuse = acknowledgeAbuse;
        set!(Nullable!bool)("acknowledgeAbuse", acknowledgeAbuse);
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public Watch setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Watch setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Watch setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Permissions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Permissions.List request = drive.permissions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Permissions permissions() {
    return new Permissions();
  }

  /**
   * The "permissions" collection of methods.
   */
  public class Permissions {

    /**
     * Creates a permission for a file or shared drive.
     *
     * Create a request for the method "permissions.create".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file or shared drive.
     * @param content the {@link Google.Apis.Drive.v3.Data.Permission}
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response)(string fileId, Google.Apis.Drive.v3.Data.Permission.Permission content) {
      auto result = new Create!(RequestT, ResponseT)(fileId, content);
      initialize!(RequestT, ResponseT, Create)(result);
      return result;
    }

    public class Create
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Permission.Permission, Google.Apis.Drive.v3.Data.Permission.Permission, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/permissions";

      /**
       * Creates a permission for a file or shared drive.
       *
       * Create a request for the method "permissions.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file or shared drive.
       * @param content the {@link Google.Apis.Drive.v3.Data.Permission}
       * @since 1.13
       */
      protected this(string fileId, Google.Apis.Drive.v3.Data.Permission.Permission content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file or shared drive. */
      private string fileId;

      /** The ID of the file or shared drive.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file or shared drive. */
      public Create setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** A plain text custom message to include in the notification email. */
      private string emailMessage;

      /** A plain text custom message to include in the notification email.
       */
      public string getEmailMessage() {
        return emailMessage;
      }

      /** A plain text custom message to include in the notification email. */
      public Create setEmailMessage(string emailMessage) {
        this.emailMessage = emailMessage;
        set!(string)("emailMessage", emailMessage);
        return this;
      }

      /** Deprecated. See moveToNewOwnersRoot for details. */
      private Nullable!bool enforceSingleParent;

      /** Deprecated. See moveToNewOwnersRoot for details. [default: false]
       */
      public Nullable!bool getEnforceSingleParent() {
        return enforceSingleParent;
      }

      /** Deprecated. See moveToNewOwnersRoot for details. */
      public Create setEnforceSingleParent(Nullable!bool enforceSingleParent) {
        this.enforceSingleParent = enforceSingleParent;
        set!(Nullable!bool)("enforceSingleParent", enforceSingleParent);
        return this;
      }

      /**
       * This parameter will only take effect if the item is not in a shared drive and the request
       * is attempting to transfer the ownership of the item. If set to true, the item will be moved
       * to the new owner's My Drive root folder and all prior parents removed. If set to false,
       * parents are not changed.
       */
      private Nullable!bool moveToNewOwnersRoot;

      /** This parameter will only take effect if the item is not in a shared drive and the request is
     attempting to transfer the ownership of the item. If set to true, the item will be moved to the new
     owner's My Drive root folder and all prior parents removed. If set to false, parents are not
     changed. [default: false]
       */
      public Nullable!bool getMoveToNewOwnersRoot() {
        return moveToNewOwnersRoot;
      }

      /**
       * This parameter will only take effect if the item is not in a shared drive and the request
       * is attempting to transfer the ownership of the item. If set to true, the item will be moved
       * to the new owner's My Drive root folder and all prior parents removed. If set to false,
       * parents are not changed.
       */
      public Create setMoveToNewOwnersRoot(Nullable!bool moveToNewOwnersRoot) {
        this.moveToNewOwnersRoot = moveToNewOwnersRoot;
        set!(Nullable!bool)("moveToNewOwnersRoot", moveToNewOwnersRoot);
        return this;
      }

      /**
       * Whether to send a notification email when sharing to users or groups. This defaults to true
       * for users and groups, and is not allowed for other requests. It must not be disabled for
       * ownership transfers.
       */
      private Nullable!bool sendNotificationEmail;

      /** Whether to send a notification email when sharing to users or groups. This defaults to true for
     users and groups, and is not allowed for other requests. It must not be disabled for ownership
     transfers.
       */
      public Nullable!bool getSendNotificationEmail() {
        return sendNotificationEmail;
      }

      /**
       * Whether to send a notification email when sharing to users or groups. This defaults to true
       * for users and groups, and is not allowed for other requests. It must not be disabled for
       * ownership transfers.
       */
      public Create setSendNotificationEmail(Nullable!bool sendNotificationEmail) {
        this.sendNotificationEmail = sendNotificationEmail;
        set!(Nullable!bool)("sendNotificationEmail", sendNotificationEmail);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Create setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Create setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /**
       * Whether to transfer ownership to the specified user and downgrade the current owner to a
       * writer. This parameter is required as an acknowledgement of the side effect.
       */
      private Nullable!bool transferOwnership;

      /** Whether to transfer ownership to the specified user and downgrade the current owner to a writer.
     This parameter is required as an acknowledgement of the side effect. [default: false]
       */
      public Nullable!bool getTransferOwnership() {
        return transferOwnership;
      }

      /**
       * Whether to transfer ownership to the specified user and downgrade the current owner to a
       * writer. This parameter is required as an acknowledgement of the side effect.
       */
      public Create setTransferOwnership(Nullable!bool transferOwnership) {
        this.transferOwnership = transferOwnership;
        set!(Nullable!bool)("transferOwnership", transferOwnership);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if the file ID parameter refers to a shared drive and the requester is an administrator of
     the domain to which the shared drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      public Create setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Deletes a permission.
     *
     * Create a request for the method "permissions.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file or shared drive.
     * @param permissionId The ID of the permission.
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string fileId, string permissionId) {
      auto result = new Delete!(RequestT, ResponseT)(fileId, permissionId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/permissions/{permissionId}";

      /**
       * Deletes a permission.
       *
       * Create a request for the method "permissions.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file or shared drive.
       * @param permissionId The ID of the permission.
       * @since 1.13
       */
      protected this(string fileId, string permissionId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.permissionId = enforce(permissionId, "Required parameter permissionId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{permissionId}", permissionId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file or shared drive. */
      private string fileId;

      /** The ID of the file or shared drive.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file or shared drive. */
      public Delete setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the permission. */
      private string permissionId;

      /** The ID of the permission.
       */
      public string getPermissionId() {
        return permissionId;
      }

      /** The ID of the permission. */
      public Delete setPermissionId(string permissionId) {
        this.permissionId = permissionId;
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Delete setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Delete setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if the file ID parameter refers to a shared drive and the requester is an administrator of
     the domain to which the shared drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      public Delete setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Gets a permission by ID.
     *
     * Create a request for the method "permissions.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param permissionId The ID of the permission.
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string fileId, string permissionId) {
      auto result = new Get!(RequestT, ResponseT)(fileId, permissionId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.Permission.Permission, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/permissions/{permissionId}";

      /**
       * Gets a permission by ID.
       *
       * Create a request for the method "permissions.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param permissionId The ID of the permission.
       * @since 1.13
       */
      protected this(string fileId, string permissionId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.permissionId = enforce(permissionId, "Required parameter permissionId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{permissionId}", permissionId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Get setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the permission. */
      private string permissionId;

      /** The ID of the permission.
       */
      public string getPermissionId() {
        return permissionId;
      }

      /** The ID of the permission. */
      public Get setPermissionId(string permissionId) {
        this.permissionId = permissionId;
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Get setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Get setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if the file ID parameter refers to a shared drive and the requester is an administrator of
     the domain to which the shared drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      public Get setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Lists a file's or shared drive's permissions.
     *
     * Create a request for the method "permissions.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file or shared drive.
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)(string fileId) {
      auto result = new List!(RequestT, ResponseT)(fileId);
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.PermissionList.PermissionList, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/permissions";

      /**
       * Lists a file's or shared drive's permissions.
       *
       * Create a request for the method "permissions.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file or shared drive.
       * @since 1.13
       */
      protected this(string fileId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file or shared drive. */
      private string fileId;

      /** The ID of the file or shared drive.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file or shared drive. */
      public List setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      private string includePermissionsForView;

      /** Specifies which additional view's permissions to include in the response. Only 'published' is
     supported.
       */
      public string getIncludePermissionsForView() {
        return includePermissionsForView;
      }

      /**
       * Specifies which additional view's permissions to include in the response. Only 'published'
       * is supported.
       */
      public List setIncludePermissionsForView(string includePermissionsForView) {
        this.includePermissionsForView = includePermissionsForView;
        set!(string)("includePermissionsForView", includePermissionsForView);
        return this;
      }

      /**
       * The maximum number of permissions to return per page. When not set for files in a shared
       * drive, at most 100 results will be returned. When not set for files that are not in a
       * shared drive, the entire list will be returned.
       */
      private MyNullable!int pageSize;

      /** The maximum number of permissions to return per page. When not set for files in a shared drive, at
     most 100 results will be returned. When not set for files that are not in a shared drive, the
     entire list will be returned.

     [minimum: 1] [maximum: 100]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of permissions to return per page. When not set for files in a shared
       * drive, at most 100 results will be returned. When not set for files that are not in a
       * shared drive, the entire list will be returned.
       */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public List setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public List setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if the file ID parameter refers to a shared drive and the requester is an administrator of
     the domain to which the shared drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      public List setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Updates a permission with patch semantics.
     *
     * Create a request for the method "permissions.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file or shared drive.
     * @param permissionId The ID of the permission.
     * @param content the {@link Google.Apis.Drive.v3.Data.Permission}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string fileId, string permissionId, Google.Apis.Drive.v3.Data.Permission.Permission content) {
      auto result = new Update!(RequestT, ResponseT)(fileId, permissionId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.Permission.Permission, Google.Apis.Drive.v3.Data.Permission.Permission, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/permissions/{permissionId}";

      /**
       * Updates a permission with patch semantics.
       *
       * Create a request for the method "permissions.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file or shared drive.
       * @param permissionId The ID of the permission.
       * @param content the {@link Google.Apis.Drive.v3.Data.Permission}
       * @since 1.13
       */
      protected this(string fileId, string permissionId, Google.Apis.Drive.v3.Data.Permission.Permission content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.permissionId = enforce(permissionId, "Required parameter permissionId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{permissionId}", permissionId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file or shared drive. */
      private string fileId;

      /** The ID of the file or shared drive.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file or shared drive. */
      public Update setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the permission. */
      private string permissionId;

      /** The ID of the permission.
       */
      public string getPermissionId() {
        return permissionId;
      }

      /** The ID of the permission. */
      public Update setPermissionId(string permissionId) {
        this.permissionId = permissionId;
        return this;
      }

      /** Whether to remove the expiration date. */
      private Nullable!bool removeExpiration;

      /** Whether to remove the expiration date. [default: false]
       */
      public Nullable!bool getRemoveExpiration() {
        return removeExpiration;
      }

      /** Whether to remove the expiration date. */
      public Update setRemoveExpiration(Nullable!bool removeExpiration) {
        this.removeExpiration = removeExpiration;
        set!(Nullable!bool)("removeExpiration", removeExpiration);
        return this;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      private Nullable!bool supportsAllDrives;

      /** Whether the requesting application supports both My Drives and shared drives. [default: false]
       */
      public Nullable!bool getSupportsAllDrives() {
        return supportsAllDrives;
      }

      /** Whether the requesting application supports both My Drives and shared drives. */
      public Update setSupportsAllDrives(Nullable!bool supportsAllDrives) {
        this.supportsAllDrives = supportsAllDrives;
        set!(Nullable!bool)("supportsAllDrives", supportsAllDrives);
        return this;
      }

      /** Deprecated use supportsAllDrives instead. */
      private Nullable!bool supportsTeamDrives;

      /** Deprecated use supportsAllDrives instead. [default: false]
       */
      public Nullable!bool getSupportsTeamDrives() {
        return supportsTeamDrives;
      }

      /** Deprecated use supportsAllDrives instead. */
      public Update setSupportsTeamDrives(Nullable!bool supportsTeamDrives) {
        this.supportsTeamDrives = supportsTeamDrives;
        set!(Nullable!bool)("supportsTeamDrives", supportsTeamDrives);
        return this;
      }

      /**
       * Whether to transfer ownership to the specified user and downgrade the current owner to a
       * writer. This parameter is required as an acknowledgement of the side effect.
       */
      private Nullable!bool transferOwnership;

      /** Whether to transfer ownership to the specified user and downgrade the current owner to a writer.
     This parameter is required as an acknowledgement of the side effect. [default: false]
       */
      public Nullable!bool getTransferOwnership() {
        return transferOwnership;
      }

      /**
       * Whether to transfer ownership to the specified user and downgrade the current owner to a
       * writer. This parameter is required as an acknowledgement of the side effect.
       */
      public Update setTransferOwnership(Nullable!bool transferOwnership) {
        this.transferOwnership = transferOwnership;
        set!(Nullable!bool)("transferOwnership", transferOwnership);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if the file ID parameter refers to a shared drive and the requester is an administrator of
     the domain to which the shared drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if the file ID parameter refers to a shared drive and the requester is an
       * administrator of the domain to which the shared drive belongs.
       */
      public Update setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Replies collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Replies.List request = drive.replies().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Replies replies() {
    return new Replies();
  }

  /**
   * The "replies" collection of methods.
   */
  public class Replies {

    /**
     * Creates a new reply to a comment.
     *
     * Create a request for the method "replies.create".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @param content the {@link Google.Apis.Drive.v3.Data.Reply}
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response)(string fileId, string commentId, Google.Apis.Drive.v3.Data.Reply.Reply content) {
      auto result = new Create!(RequestT, ResponseT)(fileId, commentId, content);
      initialize!(RequestT, ResponseT, Create)(result);
      return result;
    }

    public class Create
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.Reply.Reply, Google.Apis.Drive.v3.Data.Reply.Reply, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}/replies";

      /**
       * Creates a new reply to a comment.
       *
       * Create a request for the method "replies.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @param content the {@link Google.Apis.Drive.v3.Data.Reply}
       * @since 1.13
       */
      protected this(string fileId, string commentId, Google.Apis.Drive.v3.Data.Reply.Reply content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Create setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Create setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

    }
    /**
     * Deletes a reply.
     *
     * Create a request for the method "replies.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @param replyId The ID of the reply.
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string fileId, string commentId, string replyId) {
      auto result = new Delete!(RequestT, ResponseT)(fileId, commentId, replyId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}/replies/{replyId}";

      /**
       * Deletes a reply.
       *
       * Create a request for the method "replies.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @param replyId The ID of the reply.
       * @since 1.13
       */
      protected this(string fileId, string commentId, string replyId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");
        this.replyId = enforce(replyId, "Required parameter replyId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        restPath = restPath.replace("{replyId}", replyId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Delete setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Delete setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

      /** The ID of the reply. */
      private string replyId;

      /** The ID of the reply.
       */
      public string getReplyId() {
        return replyId;
      }

      /** The ID of the reply. */
      public Delete setReplyId(string replyId) {
        this.replyId = replyId;
        return this;
      }

    }
    /**
     * Gets a reply by ID.
     *
     * Create a request for the method "replies.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @param replyId The ID of the reply.
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string fileId, string commentId, string replyId) {
      auto result = new Get!(RequestT, ResponseT)(fileId, commentId, replyId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.Reply.Reply, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}/replies/{replyId}";

      /**
       * Gets a reply by ID.
       *
       * Create a request for the method "replies.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @param replyId The ID of the reply.
       * @since 1.13
       */
      protected this(string fileId, string commentId, string replyId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");
        this.replyId = enforce(replyId, "Required parameter replyId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        restPath = restPath.replace("{replyId}", replyId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Get setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Get setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

      /** The ID of the reply. */
      private string replyId;

      /** The ID of the reply.
       */
      public string getReplyId() {
        return replyId;
      }

      /** The ID of the reply. */
      public Get setReplyId(string replyId) {
        this.replyId = replyId;
        return this;
      }

      /**
       * Whether to return deleted replies. Deleted replies will not include their original content.
       */
      private Nullable!bool includeDeleted;

      /** Whether to return deleted replies. Deleted replies will not include their original content.
     [default: false]
       */
      public Nullable!bool getIncludeDeleted() {
        return includeDeleted;
      }

      /**
       * Whether to return deleted replies. Deleted replies will not include their original content.
       */
      public Get setIncludeDeleted(Nullable!bool includeDeleted) {
        this.includeDeleted = includeDeleted;
        set!(Nullable!bool)("includeDeleted", includeDeleted);
        return this;
      }

    }
    /**
     * Lists a comment's replies.
     *
     * Create a request for the method "replies.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)(string fileId, string commentId) {
      auto result = new List!(RequestT, ResponseT)(fileId, commentId);
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.ReplyList.ReplyList, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}/replies";

      /**
       * Lists a comment's replies.
       *
       * Create a request for the method "replies.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @since 1.13
       */
      protected this(string fileId, string commentId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public List setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public List setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

      /**
       * Whether to include deleted replies. Deleted replies will not include their original
       * content.
       */
      private Nullable!bool includeDeleted;

      /** Whether to include deleted replies. Deleted replies will not include their original content.
     [default: false]
       */
      public Nullable!bool getIncludeDeleted() {
        return includeDeleted;
      }

      /**
       * Whether to include deleted replies. Deleted replies will not include their original
       * content.
       */
      public List setIncludeDeleted(Nullable!bool includeDeleted) {
        this.includeDeleted = includeDeleted;
        set!(Nullable!bool)("includeDeleted", includeDeleted);
        return this;
      }

      /** The maximum number of replies to return per page. */
      private MyNullable!int pageSize;

      /** The maximum number of replies to return per page. [default: 20] [minimum: 1] [maximum: 100]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** The maximum number of replies to return per page. */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

    }
    /**
     * Updates a reply with patch semantics.
     *
     * Create a request for the method "replies.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param commentId The ID of the comment.
     * @param replyId The ID of the reply.
     * @param content the {@link Google.Apis.Drive.v3.Data.Reply}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string fileId, string commentId, string replyId, Google.Apis.Drive.v3.Data.Reply.Reply content) {
      auto result = new Update!(RequestT, ResponseT)(fileId, commentId, replyId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.Reply.Reply, Google.Apis.Drive.v3.Data.Reply.Reply, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/comments/{commentId}/replies/{replyId}";

      /**
       * Updates a reply with patch semantics.
       *
       * Create a request for the method "replies.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param commentId The ID of the comment.
       * @param replyId The ID of the reply.
       * @param content the {@link Google.Apis.Drive.v3.Data.Reply}
       * @since 1.13
       */
      protected this(string fileId, string commentId, string replyId, Google.Apis.Drive.v3.Data.Reply.Reply content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.commentId = enforce(commentId, "Required parameter commentId must be specified.");
        this.replyId = enforce(replyId, "Required parameter replyId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{commentId}", commentId);
        restPath = restPath.replace("{replyId}", replyId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Update setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the comment. */
      private string commentId;

      /** The ID of the comment.
       */
      public string getCommentId() {
        return commentId;
      }

      /** The ID of the comment. */
      public Update setCommentId(string commentId) {
        this.commentId = commentId;
        return this;
      }

      /** The ID of the reply. */
      private string replyId;

      /** The ID of the reply.
       */
      public string getReplyId() {
        return replyId;
      }

      /** The ID of the reply. */
      public Update setReplyId(string replyId) {
        this.replyId = replyId;
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Revisions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Revisions.List request = drive.revisions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Revisions revisions() {
    return new Revisions();
  }

  /**
   * The "revisions" collection of methods.
   */
  public class Revisions {

    /**
     * Permanently deletes a file version. You can only delete revisions for files with binary content
     * in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets,
     * and the last remaining file version can't be deleted.
     *
     * Create a request for the method "revisions.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param revisionId The ID of the revision.
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string fileId, string revisionId) {
      auto result = new Delete!(RequestT, ResponseT)(fileId, revisionId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/revisions/{revisionId}";

      /**
       * Permanently deletes a file version. You can only delete revisions for files with binary content
       * in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets,
       * and the last remaining file version can't be deleted.
       *
       * Create a request for the method "revisions.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param revisionId The ID of the revision.
       * @since 1.13
       */
      protected this(string fileId, string revisionId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.revisionId = enforce(revisionId, "Required parameter revisionId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{revisionId}", revisionId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Delete setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the revision. */
      private string revisionId;

      /** The ID of the revision.
       */
      public string getRevisionId() {
        return revisionId;
      }

      /** The ID of the revision. */
      public Delete setRevisionId(string revisionId) {
        this.revisionId = revisionId;
        return this;
      }

    }
    /**
     * Gets a revision's metadata or content by ID.
     *
     * Create a request for the method "revisions.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param revisionId The ID of the revision.
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string fileId, string revisionId) {
      auto result = new Get!(RequestT, ResponseT)(fileId, revisionId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.Revision.Revision, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/revisions/{revisionId}";

      /**
       * Gets a revision's metadata or content by ID.
       *
       * Create a request for the method "revisions.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param revisionId The ID of the revision.
       * @since 1.13
       */
      protected this(string fileId, string revisionId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.revisionId = enforce(revisionId, "Required parameter revisionId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{revisionId}", revisionId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Get setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the revision. */
      private string revisionId;

      /** The ID of the revision.
       */
      public string getRevisionId() {
        return revisionId;
      }

      /** The ID of the revision. */
      public Get setRevisionId(string revisionId) {
        this.revisionId = revisionId;
        return this;
      }

      /**
       * Whether the user is acknowledging the risk of downloading known malware or other abusive
       * files. This is only applicable when alt=media.
       */
      private Nullable!bool acknowledgeAbuse;

      /** Whether the user is acknowledging the risk of downloading known malware or other abusive files.
     This is only applicable when alt=media. [default: false]
       */
      public Nullable!bool getAcknowledgeAbuse() {
        return acknowledgeAbuse;
      }

      /**
       * Whether the user is acknowledging the risk of downloading known malware or other abusive
       * files. This is only applicable when alt=media.
       */
      public Get setAcknowledgeAbuse(Nullable!bool acknowledgeAbuse) {
        this.acknowledgeAbuse = acknowledgeAbuse;
        set!(Nullable!bool)("acknowledgeAbuse", acknowledgeAbuse);
        return this;
      }

    }
    /**
     * Lists a file's revisions.
     *
     * Create a request for the method "revisions.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)(string fileId) {
      auto result = new List!(RequestT, ResponseT)(fileId);
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.RevisionList.RevisionList, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/revisions";

      /**
       * Lists a file's revisions.
       *
       * Create a request for the method "revisions.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @since 1.13
       */
      protected this(string fileId) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public List setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The maximum number of revisions to return per page. */
      private MyNullable!int pageSize;

      /** The maximum number of revisions to return per page. [default: 200] [minimum: 1] [maximum: 1000]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** The maximum number of revisions to return per page. */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      private string pageToken;

      /** The token for continuing a previous list request on the next page. This should be set to the value
     of 'nextPageToken' from the previous response.
       */
      public string getPageToken() {
        return pageToken;
      }

      /**
       * The token for continuing a previous list request on the next page. This should be set to
       * the value of 'nextPageToken' from the previous response.
       */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

    }
    /**
     * Updates a revision with patch semantics.
     *
     * Create a request for the method "revisions.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param fileId The ID of the file.
     * @param revisionId The ID of the revision.
     * @param content the {@link Google.Apis.Drive.v3.Data.Revision}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string fileId, string revisionId, Google.Apis.Drive.v3.Data.Revision.Revision content) {
      auto result = new Update!(RequestT, ResponseT)(fileId, revisionId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.Revision.Revision, Google.Apis.Drive.v3.Data.Revision.Revision, MediaContentType) {
      private static const string REST_PATH = "files/{fileId}/revisions/{revisionId}";

      /**
       * Updates a revision with patch semantics.
       *
       * Create a request for the method "revisions.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param fileId The ID of the file.
       * @param revisionId The ID of the revision.
       * @param content the {@link Google.Apis.Drive.v3.Data.Revision}
       * @since 1.13
       */
      protected this(string fileId, string revisionId, Google.Apis.Drive.v3.Data.Revision.Revision content) {
        this.fileId = enforce(fileId, "Required parameter fileId must be specified.");
        this.revisionId = enforce(revisionId, "Required parameter revisionId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{fileId}", fileId);
        restPath = restPath.replace("{revisionId}", revisionId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the file. */
      private string fileId;

      /** The ID of the file.
       */
      public string getFileId() {
        return fileId;
      }

      /** The ID of the file. */
      public Update setFileId(string fileId) {
        this.fileId = fileId;
        return this;
      }

      /** The ID of the revision. */
      private string revisionId;

      /** The ID of the revision.
       */
      public string getRevisionId() {
        return revisionId;
      }

      /** The ID of the revision. */
      public Update setRevisionId(string revisionId) {
        this.revisionId = revisionId;
        return this;
      }

    }

  }

  /**
   * An accessor for creating requests from the Teamdrives collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Drive drive = new Drive(...);}
   *   {@code Drive.Teamdrives.List request = drive.teamdrives().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Teamdrives teamdrives() {
    return new Teamdrives();
  }

  /**
   * The "teamdrives" collection of methods.
   */
  public class Teamdrives {

    /**
     * Deprecated use drives.create instead.
     *
     * Create a request for the method "teamdrives.create".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param requestId An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation
     *        of a Team Drive. A repeated request by the same user and with the same request ID will
     *        avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive
     *        already exists a 409 error will be returned.
     * @param content the {@link Google.Apis.Drive.v3.Data.TeamDrive}
     * @return the request
     */
    public auto create_(RequestT = Request, ResponseT = Response)(string requestId, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive content) {
      auto result = new Create!(RequestT, ResponseT)(requestId, content);
      initialize!(RequestT, ResponseT, Create)(result);
      return result;
    }

    public class Create
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "POST", Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive, MediaContentType) {
      private static const string REST_PATH = "teamdrives";

      /**
       * Deprecated use drives.create instead.
       *
       * Create a request for the method "teamdrives.create".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param requestId An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation
     *        of a Team Drive. A repeated request by the same user and with the same request ID will
     *        avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive
     *        already exists a 409 error will be returned.
       * @param content the {@link Google.Apis.Drive.v3.Data.TeamDrive}
       * @since 1.13
       */
      protected this(string requestId, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive content) {
        this.requestId = enforce(requestId, "Required parameter requestId must be specified.");

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Create!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Create!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Create!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /**
       * An ID, such as a random UUID, which uniquely identifies this user's request for idempotent
       * creation of a Team Drive. A repeated request by the same user and with the same request ID
       * will avoid creating duplicates by attempting to create the same Team Drive. If the Team
       * Drive already exists a 409 error will be returned.
       */
      private string requestId;

      /** An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation
     of a Team Drive. A repeated request by the same user and with the same request ID will avoid
     creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a
     409 error will be returned.
       */
      public string getRequestId() {
        return requestId;
      }

      /**
       * An ID, such as a random UUID, which uniquely identifies this user's request for idempotent
       * creation of a Team Drive. A repeated request by the same user and with the same request ID
       * will avoid creating duplicates by attempting to create the same Team Drive. If the Team
       * Drive already exists a 409 error will be returned.
       */
      public Create setRequestId(string requestId) {
        this.requestId = requestId;
        set!(string)("requestId", requestId);
        return this;
      }

    }
    /**
     * Deprecated use drives.delete instead.
     *
     * Create a request for the method "teamdrives.delete".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param teamDriveId The ID of the Team Drive
     * @return the request
     */
    public auto delete_(RequestT = Request, ResponseT = Response)(string teamDriveId) {
      auto result = new Delete!(RequestT, ResponseT)(teamDriveId);
      initialize!(RequestT, ResponseT, Delete)(result);
      return result;
    }

    public class Delete
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "DELETE", Object, Object, MediaContentType) {
      private static const string REST_PATH = "teamdrives/{teamDriveId}";

      /**
       * Deprecated use drives.delete instead.
       *
       * Create a request for the method "teamdrives.delete".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param teamDriveId The ID of the Team Drive
       * @since 1.13
       */
      protected this(string teamDriveId) {
        this.teamDriveId = enforce(teamDriveId, "Required parameter teamDriveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{teamDriveId}", teamDriveId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Delete!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Delete!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Delete!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the Team Drive */
      private string teamDriveId;

      /** The ID of the Team Drive
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** The ID of the Team Drive */
      public Delete setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        return this;
      }

    }
    /**
     * Deprecated use drives.get instead.
     *
     * Create a request for the method "teamdrives.get".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param teamDriveId The ID of the Team Drive
     * @return the request
     */
    public auto get_(RequestT = Request, ResponseT = Response)(string teamDriveId) {
      auto result = new Get!(RequestT, ResponseT)(teamDriveId);
      initialize!(RequestT, ResponseT, Get)(result);
      return result;
    }

    public class Get
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive, MediaContentType) {
      private static const string REST_PATH = "teamdrives/{teamDriveId}";

      /**
       * Deprecated use drives.get instead.
       *
       * Create a request for the method "teamdrives.get".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param teamDriveId The ID of the Team Drive
       * @since 1.13
       */
      protected this(string teamDriveId) {
        this.teamDriveId = enforce(teamDriveId, "Required parameter teamDriveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{teamDriveId}", teamDriveId);
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public Get!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Get!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Get!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the Team Drive */
      private string teamDriveId;

      /** The ID of the Team Drive
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** The ID of the Team Drive */
      public Get setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the Team Drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if they are an administrator of the domain to which the Team Drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the Team Drive belongs.
       */
      public Get setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Deprecated use drives.list instead.
     *
     * Create a request for the method "teamdrives.list".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public auto list_(RequestT = Request, ResponseT = Response)() {
      auto result = new List!(RequestT, ResponseT)();
      initialize!(RequestT, ResponseT, List)(result);
      return result;
    }

    public class List
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "GET", Object, Google.Apis.Drive.v3.Data.TeamDriveList.TeamDriveList, MediaContentType) {
      private static const string REST_PATH = "teamdrives";

      /**
       * Deprecated use drives.list instead.
       *
       * Create a request for the method "teamdrives.list".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected this() {

        string restPath = REST_PATH;
        super(restPath, DEFAULT_BASE_URL);
      }

      override {

        public List!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public List!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public List!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public List!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public List!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public List!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public List!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(List!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** Maximum number of Team Drives to return. */
      private MyNullable!int pageSize;

      /** Maximum number of Team Drives to return. [default: 10] [minimum: 1] [maximum: 100]
       */
      public MyNullable!int getPageSize() {
        return pageSize;
      }

      /** Maximum number of Team Drives to return. */
      public List setPageSize(MyNullable!int pageSize) {
        this.pageSize = pageSize;
        set!(MyNullable!int)("pageSize", pageSize);
        return this;
      }

      /** Page token for Team Drives. */
      private string pageToken;

      /** Page token for Team Drives.
       */
      public string getPageToken() {
        return pageToken;
      }

      /** Page token for Team Drives. */
      public List setPageToken(string pageToken) {
        this.pageToken = pageToken;
        set!(string)("pageToken", pageToken);
        return this;
      }

      /** Query string for searching Team Drives. */
      private string q;

      /** Query string for searching Team Drives.
       */
      public string getQ() {
        return q;
      }

      /** Query string for searching Team Drives. */
      public List setQ(string q) {
        this.q = q;
        set!(string)("q", q);
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then all Team Drives of the
       * domain in which the requester is an administrator are returned.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in
     which the requester is an administrator are returned. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then all Team Drives of the
       * domain in which the requester is an administrator are returned.
       */
      public List setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }
    /**
     * Deprecated use drives.update instead
     *
     * Create a request for the method "teamdrives.update".
     *
     * This request holds the parameters needed by the drive server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param teamDriveId The ID of the Team Drive
     * @param content the {@link Google.Apis.Drive.v3.Data.TeamDrive}
     * @return the request
     */
    public auto update_(RequestT = Request, ResponseT = Response)(string teamDriveId, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive content) {
      auto result = new Update!(RequestT, ResponseT)(teamDriveId, content);
      initialize!(RequestT, ResponseT, Update)(result);
      return result;
    }

    public class Update
      (RequestT = Request, ResponseT = Response, MediaContentType = string) :
      DriveRequest!(RequestT, ResponseT, "PATCH", Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive, MediaContentType) {
      private static const string REST_PATH = "teamdrives/{teamDriveId}";

      /**
       * Deprecated use drives.update instead
       *
       * Create a request for the method "teamdrives.update".
       *
       * This request holds the parameters needed by the the drive server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param teamDriveId The ID of the Team Drive
       * @param content the {@link Google.Apis.Drive.v3.Data.TeamDrive}
       * @since 1.13
       */
      protected this(string teamDriveId, Google.Apis.Drive.v3.Data.TeamDrive.TeamDrive content) {
        this.teamDriveId = enforce(teamDriveId, "Required parameter teamDriveId must be specified.");

        string restPath = REST_PATH;
        restPath = restPath.replace("{teamDriveId}", teamDriveId);
        super(restPath, DEFAULT_BASE_URL);
        this.content = content;
      }

      override {

        public Update!(RequestT, ResponseT, MediaContentType) setAlt(string alt) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setAlt(alt);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setFields(string fields) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setFields(fields);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setKey(string key) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setKey(key);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setOauthToken(string oauthToken) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setOauthToken(oauthToken);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setPrettyPrint(Nullable!bool prettyPrint) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setPrettyPrint(prettyPrint);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setQuotaUser(string quotaUser) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setQuotaUser(quotaUser);
        }
        public Update!(RequestT, ResponseT, MediaContentType) setUserIp(string userIp) {
          return cast(Update!(RequestT, ResponseT, MediaContentType)) super.setUserIp(userIp);
        }
      }

      /** The ID of the Team Drive */
      private string teamDriveId;

      /** The ID of the Team Drive
       */
      public string getTeamDriveId() {
        return teamDriveId;
      }

      /** The ID of the Team Drive */
      public Update setTeamDriveId(string teamDriveId) {
        this.teamDriveId = teamDriveId;
        return this;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the Team Drive belongs.
       */
      private Nullable!bool useDomainAdminAccess;

      /** Issue the request as a domain administrator; if set to true, then the requester will be granted
     access if they are an administrator of the domain to which the Team Drive belongs. [default: false]
       */
      public Nullable!bool getUseDomainAdminAccess() {
        return useDomainAdminAccess;
      }

      /**
       * Issue the request as a domain administrator; if set to true, then the requester will be
       * granted access if they are an administrator of the domain to which the Team Drive belongs.
       */
      public Update setUseDomainAdminAccess(Nullable!bool useDomainAdminAccess) {
        this.useDomainAdminAccess = useDomainAdminAccess;
        set!(Nullable!bool)("useDomainAdminAccess", useDomainAdminAccess);
        return this;
      }

    }

  }

}
