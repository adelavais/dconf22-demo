/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Drive.v3.Data.ContentRestriction;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Drive.v3.DriveMyNullable;

import Google.Apis.Drive.v3.Data.User;

/**
 * A restriction for accessing the content of the file.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Drive API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct ContentRestriction {

  /**
   * Whether the content of the file is read-only. If a file is read-only, a new revision of the
   * file may not be added, comments may not be added or modified, and the title of the file may not
   * be modified.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _readOnly__;

  /**
   * Reason for why the content of the file is restricted. This is only mutable on requests that
   * also set readOnly=true.
   * The value may be {@code null}.
   */
  @optional public string _reason;

  /**
   * The user who set the content restriction. Only populated if readOnly is true.
   * The value may be {@code null}.
   */
  @optional public User _restrictingUser;

  /**
   * The time at which the content restriction was set (formatted RFC 3339 timestamp). Only
   * populated if readOnly is true.
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _restrictionTime;

  /**
   * The type of the content restriction. Currently the only possible value is
   * globalContentRestriction.
   * The value may be {@code null}.
   */
  @optional public string _type;

  /**
   * Whether the content of the file is read-only. If a file is read-only, a new revision of the
   * file may not be added, comments may not be added or modified, and the title of the file may not
   * be modified.
   * @return value or {@code null} for none
   */
  public Nullable!bool getReadOnly() {
    return _readOnly__;
  }
  /**
   * Whether the content of the file is read-only. If a file is read-only, a new revision of the
   * file may not be added, comments may not be added or modified, and the title of the file may not
   * be modified.
   * @param readOnly__ readOnly__ or {@code null} for none
   */
  public ContentRestriction setReadOnly(Nullable!bool _readOnly__) {
    this._readOnly__ = _readOnly__;
    return this;
  }

  /**
   * Reason for why the content of the file is restricted. This is only mutable on requests that
   * also set readOnly=true.
   * @return value or {@code null} for none
   */
  public string getReason() {
    return _reason;
  }
  /**
   * Reason for why the content of the file is restricted. This is only mutable on requests that
   * also set readOnly=true.
   * @param reason reason or {@code null} for none
   */
  public ContentRestriction setReason(string _reason) {
    this._reason = _reason;
    return this;
  }

  /**
   * The user who set the content restriction. Only populated if readOnly is true.
   * @return value or {@code null} for none
   */
  public User getRestrictingUser() {
    return _restrictingUser;
  }
  /**
   * The user who set the content restriction. Only populated if readOnly is true.
   * @param restrictingUser restrictingUser or {@code null} for none
   */
  public ContentRestriction setRestrictingUser(User _restrictingUser) {
    this._restrictingUser = _restrictingUser;
    return this;
  }

  /**
   * The time at which the content restriction was set (formatted RFC 3339 timestamp). Only
   * populated if readOnly is true.
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getRestrictionTime() {
    return _restrictionTime;
  }
  /**
   * The time at which the content restriction was set (formatted RFC 3339 timestamp). Only
   * populated if readOnly is true.
   * @param restrictionTime restrictionTime or {@code null} for none
   */
  public ContentRestriction setRestrictionTime(Nullable!SysTime _restrictionTime) {
    this._restrictionTime = _restrictionTime;
    return this;
  }

  /**
   * The type of the content restriction. Currently the only possible value is
   * globalContentRestriction.
   * @return value or {@code null} for none
   */
  public string getType() {
    return _type;
  }
  /**
   * The type of the content restriction. Currently the only possible value is
   * globalContentRestriction.
   * @param type type or {@code null} for none
   */
  public ContentRestriction setType(string _type) {
    this._type = _type;
    return this;
  }

}