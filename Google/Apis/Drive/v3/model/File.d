/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Drive.v3.Data.File;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Drive.v3.DriveMyNullable;

import Google.Apis.Drive.v3.Data.ContentRestriction;
import Google.Apis.Drive.v3.Data.User;
import Google.Apis.Drive.v3.Data.Permission;

/**
 * The metadata for a file.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Drive API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct File {

  /**
   * A collection of arbitrary key-value pairs which are private to the requesting app. Entries with
   * null values are cleared in update and copy requests. These properties can only be retrieved
   * using an authenticated request. An authenticated request uses an access token obtained with a
   * OAuth 2 client ID. You cannot use an API key to retrieve private properties.
   * The value may be {@code null}.
   */
  @optional public string[string] _appProperties;

  /**
   * Capabilities the current user has on this file. Each capability corresponds to a fine-grained
   * action that a user may take.
   * The value may be {@code null}.
   */
  @optional public CapabilitiesData _capabilities;

  /**
   * Additional information about the content of the file. These fields are never populated in
   * responses.
   * The value may be {@code null}.
   */
  @optional public ContentHintsData _contentHints;

  /**
   * Restrictions for accessing the content of the file. Only populated if such a restriction
   * exists.
   * The value may be {@code null}.
   */
  @optional public ContentRestriction[] _contentRestrictions;

  /**
   * Whether the options to copy, print, or download this file, should be disabled for readers and
   * commenters.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _copyRequiresWriterPermission;

  /**
   * The time at which the file was created (RFC 3339 date-time).
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _createdTime;

  /**
   * A short description of the file.
   * The value may be {@code null}.
   */
  @optional public string _description;

  /**
   * ID of the shared drive the file resides in. Only populated for items in shared drives.
   * The value may be {@code null}.
   */
  @optional public string _driveId;

  /**
   * Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent
   * folder.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _explicitlyTrashed;

  /**
   * Links for exporting Docs Editors files to specific formats.
   * The value may be {@code null}.
   */
  @optional public string[string] _exportLinks;

  /**
   * The final component of fullFileExtension. This is only available for files with binary content
   * in Google Drive.
   * The value may be {@code null}.
   */
  @optional public string _fileExtension;

  /**
   * The color for a folder as an RGB hex string. The supported colors are published in the
   * folderColorPalette field of the About resource. If an unsupported color is specified, the
   * closest color in the palette will be used instead.
   * The value may be {@code null}.
   */
  @optional public string _folderColorRgb;

  /**
   * The full file extension extracted from the name field. May contain multiple concatenated
   * extensions, such as "tar.gz". This is only available for files with binary content in Google
   * Drive. This is automatically updated when the name field changes, however it is not cleared if
   * the new name does not contain a valid extension.
   * The value may be {@code null}.
   */
  @optional public string _fullFileExtension;

  /**
   * Whether there are permissions directly on this file. This field is only populated for items in
   * shared drives.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _hasAugmentedPermissions;

  /**
   * Whether this file has a thumbnail. This does not indicate whether the requesting app has access
   * to the thumbnail. To check access, look for the presence of the thumbnailLink field.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _hasThumbnail;

  /**
   * The ID of the file's head revision. This is currently only available for files with binary
   * content in Google Drive.
   * The value may be {@code null}.
   */
  @optional public string _headRevisionId;

  /**
   * A static, unauthenticated link to the file's icon.
   * The value may be {@code null}.
   */
  @optional public string _iconLink;

  /**
   * The ID of the file.
   * The value may be {@code null}.
   */
  @optional public string _id;

  /**
   * Additional metadata about image media, if available.
   * The value may be {@code null}.
   */
  @optional public ImageMediaMetadataData _imageMediaMetadata;

  /**
   * Whether the file was created or opened by the requesting app.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _isAppAuthorized;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "drive#file".
   * The value may be {@code null}.
   */
  @optional public string _kind;

  /**
   * The last user to modify the file.
   * The value may be {@code null}.
   */
  @optional public User _lastModifyingUser;

  /**
   * The MD5 checksum for the content of the file. This is only applicable to files with binary
   * content in Google Drive.
   * The value may be {@code null}.
   */
  @optional public string _md5Checksum;

  /**
   * The MIME type of the file. Google Drive will attempt to automatically detect an appropriate
   * value from uploaded content if no value is provided. The value cannot be changed unless a new
   * revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content
   * will be imported if possible. The supported import formats are published in the About resource.
   * The value may be {@code null}.
   */
  @optional public string _mimeType;

  /**
   * Whether the file has been modified by this user.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _modifiedByMe;

  /**
   * The last time the file was modified by the user (RFC 3339 date-time).
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _modifiedByMeTime;

  /**
   * The last time the file was modified by anyone (RFC 3339 date-time). Note that setting
   * modifiedTime will also update modifiedByMeTime for the user.
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _modifiedTime;

  /**
   * The name of the file. This is not necessarily unique within a folder. Note that for immutable
   * items such as the top level folders of shared drives, My Drive root folder, and Application
   * Data folder the name is constant.
   * The value may be {@code null}.
   */
  @optional public string _name;

  /**
   * The original filename of the uploaded content if available, or else the original value of the
   * name field. This is only available for files with binary content in Google Drive.
   * The value may be {@code null}.
   */
  @optional public string _originalFilename;

  /**
   * Whether the user owns the file. Not populated for items in shared drives.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _ownedByMe;

  /**
   * The owners of the file. Currently, only certain legacy files may have more than one owner. Not
   * populated for items in shared drives.
   * The value may be {@code null}.
   */
  @optional public User[] _owners;

  /**
   * The IDs of the parent folders which contain the file. If not specified as part of a create
   * request, the file will be placed directly in the user's My Drive folder. If not specified as
   * part of a copy request, the file will inherit any discoverable parents of the source file.
   * Update requests must use the addParents and removeParents parameters to modify the parents
   * list.
   * The value may be {@code null}.
   */
  @optional public string[] _parents;

  /**
   * List of permission IDs for users with access to this file.
   * The value may be {@code null}.
   */
  @optional public string[] _permissionIds;

  /**
   * The full list of permissions for the file. This is only available if the requesting user can
   * share the file. Not populated for items in shared drives.
   * The value may be {@code null}.
   */
  @optional public Permission[] _permissions;

  /**
   * A collection of arbitrary key-value pairs which are visible to all apps. Entries with null
   * values are cleared in update and copy requests.
   * The value may be {@code null}.
   */
  @optional public string[string] _properties;

  /**
   * The number of storage quota bytes used by the file. This includes the head revision as well as
   * previous revisions with keepForever enabled.
   * The value may be {@code null}.
   */
  @optional public MyNullable!long _quotaBytesUsed;

  /**
   * Whether the file has been shared. Not populated for items in shared drives.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _shared;

  /**
   * The time at which the file was shared with the user, if applicable (RFC 3339 date-time).
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _sharedWithMeTime;

  /**
   * The user who shared the file with the requesting user, if applicable.
   * The value may be {@code null}.
   */
  @optional public User _sharingUser;

  /**
   * Shortcut file details. Only populated for shortcut files, which have the mimeType field set to
   * application/vnd.google-apps.shortcut.
   * The value may be {@code null}.
   */
  @optional public ShortcutDetailsData _shortcutDetails;

  /**
   * The size of the file's content in bytes. This is applicable to binary files in Google Drive and
   * Google Docs files.
   * The value may be {@code null}.
   */
  @optional public MyNullable!long _size;

  /**
   * The list of spaces which contain the file. The currently supported values are 'drive',
   * 'appDataFolder' and 'photos'.
   * The value may be {@code null}.
   */
  @optional public string[] _spaces;

  /**
   * Whether the user has starred the file.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _starred;

  /**
   * Deprecated - use driveId instead.
   * The value may be {@code null}.
   */
  @optional public string _teamDriveId;

  /**
   * A short-lived link to the file's thumbnail, if available. Typically lasts on the order of
   * hours. Only populated when the requesting app can access the file's content. If the file isn't
   * shared publicly, the URL returned in Files.thumbnailLink must be fetched using a credentialed
   * request.
   * The value may be {@code null}.
   */
  @optional public string _thumbnailLink;

  /**
   * The thumbnail version for use in thumbnail cache invalidation.
   * The value may be {@code null}.
   */
  @optional public MyNullable!long _thumbnailVersion;

  /**
   * Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the
   * owner may trash a file. The trashed item is excluded from all files.list responses returned for
   * any user who does not own the file. However, all users with access to the file can see the
   * trashed item metadata in an API response. All users with access can copy, download, export, and
   * share the file.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _trashed;

  /**
   * The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared
   * drives.
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _trashedTime;

  /**
   * If the file has been explicitly trashed, the user who trashed it. Only populated for items in
   * shared drives.
   * The value may be {@code null}.
   */
  @optional public User _trashingUser;

  /**
   * A monotonically increasing version number for the file. This reflects every change made to the
   * file on the server, even those not visible to the user.
   * The value may be {@code null}.
   */
  @optional public MyNullable!long _version;

  /**
   * Additional metadata about video media. This may not be available immediately upon upload.
   * The value may be {@code null}.
   */
  @optional public VideoMediaMetadataData _videoMediaMetadata;

  /**
   * Whether the file has been viewed by this user.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _viewedByMe;

  /**
   * The last time the file was viewed by the user (RFC 3339 date-time).
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _viewedByMeTime;

  /**
   * Deprecated - use copyRequiresWriterPermission instead.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _viewersCanCopyContent;

  /**
   * A link for downloading the content of the file in a browser. This is only available for files
   * with binary content in Google Drive.
   * The value may be {@code null}.
   */
  @optional public string _webContentLink;

  /**
   * A link for opening the file in a relevant Google editor or viewer in a browser.
   * The value may be {@code null}.
   */
  @optional public string _webViewLink;

  /**
   * Whether users with only writer permission can modify the file's permissions. Not populated for
   * items in shared drives.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _writersCanShare;

  /**
   * A collection of arbitrary key-value pairs which are private to the requesting app. Entries with
   * null values are cleared in update and copy requests. These properties can only be retrieved
   * using an authenticated request. An authenticated request uses an access token obtained with a
   * OAuth 2 client ID. You cannot use an API key to retrieve private properties.
   * @return value or {@code null} for none
   */
  public string[string] getAppProperties() {
    return _appProperties;
  }
  /**
   * A collection of arbitrary key-value pairs which are private to the requesting app. Entries with
   * null values are cleared in update and copy requests. These properties can only be retrieved
   * using an authenticated request. An authenticated request uses an access token obtained with a
   * OAuth 2 client ID. You cannot use an API key to retrieve private properties.
   * @param appProperties appProperties or {@code null} for none
   */
  public File setAppProperties(string[string] _appProperties) {
    this._appProperties = _appProperties;
    return this;
  }

  /**
   * Capabilities the current user has on this file. Each capability corresponds to a fine-grained
   * action that a user may take.
   * @return value or {@code null} for none
   */
  public CapabilitiesData getCapabilities() {
    return _capabilities;
  }
  /**
   * Capabilities the current user has on this file. Each capability corresponds to a fine-grained
   * action that a user may take.
   * @param capabilities capabilities or {@code null} for none
   */
  public File setCapabilities(CapabilitiesData _capabilities) {
    this._capabilities = _capabilities;
    return this;
  }

  /**
   * Additional information about the content of the file. These fields are never populated in
   * responses.
   * @return value or {@code null} for none
   */
  public ContentHintsData getContentHints() {
    return _contentHints;
  }
  /**
   * Additional information about the content of the file. These fields are never populated in
   * responses.
   * @param contentHints contentHints or {@code null} for none
   */
  public File setContentHints(ContentHintsData _contentHints) {
    this._contentHints = _contentHints;
    return this;
  }

  /**
   * Restrictions for accessing the content of the file. Only populated if such a restriction
   * exists.
   * @return value or {@code null} for none
   */
  public ContentRestriction[] getContentRestrictions() {
    return _contentRestrictions;
  }
  /**
   * Restrictions for accessing the content of the file. Only populated if such a restriction
   * exists.
   * @param contentRestrictions contentRestrictions or {@code null} for none
   */
  public File setContentRestrictions(ContentRestriction[] _contentRestrictions) {
    this._contentRestrictions = _contentRestrictions;
    return this;
  }

  /**
   * Whether the options to copy, print, or download this file, should be disabled for readers and
   * commenters.
   * @return value or {@code null} for none
   */
  public Nullable!bool getCopyRequiresWriterPermission() {
    return _copyRequiresWriterPermission;
  }
  /**
   * Whether the options to copy, print, or download this file, should be disabled for readers and
   * commenters.
   * @param copyRequiresWriterPermission copyRequiresWriterPermission or {@code null} for none
   */
  public File setCopyRequiresWriterPermission(Nullable!bool _copyRequiresWriterPermission) {
    this._copyRequiresWriterPermission = _copyRequiresWriterPermission;
    return this;
  }

  /**
   * The time at which the file was created (RFC 3339 date-time).
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getCreatedTime() {
    return _createdTime;
  }
  /**
   * The time at which the file was created (RFC 3339 date-time).
   * @param createdTime createdTime or {@code null} for none
   */
  public File setCreatedTime(Nullable!SysTime _createdTime) {
    this._createdTime = _createdTime;
    return this;
  }

  /**
   * A short description of the file.
   * @return value or {@code null} for none
   */
  public string getDescription() {
    return _description;
  }
  /**
   * A short description of the file.
   * @param description description or {@code null} for none
   */
  public File setDescription(string _description) {
    this._description = _description;
    return this;
  }

  /**
   * ID of the shared drive the file resides in. Only populated for items in shared drives.
   * @return value or {@code null} for none
   */
  public string getDriveId() {
    return _driveId;
  }
  /**
   * ID of the shared drive the file resides in. Only populated for items in shared drives.
   * @param driveId driveId or {@code null} for none
   */
  public File setDriveId(string _driveId) {
    this._driveId = _driveId;
    return this;
  }

  /**
   * Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent
   * folder.
   * @return value or {@code null} for none
   */
  public Nullable!bool getExplicitlyTrashed() {
    return _explicitlyTrashed;
  }
  /**
   * Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent
   * folder.
   * @param explicitlyTrashed explicitlyTrashed or {@code null} for none
   */
  public File setExplicitlyTrashed(Nullable!bool _explicitlyTrashed) {
    this._explicitlyTrashed = _explicitlyTrashed;
    return this;
  }

  /**
   * Links for exporting Docs Editors files to specific formats.
   * @return value or {@code null} for none
   */
  public string[string] getExportLinks() {
    return _exportLinks;
  }
  /**
   * Links for exporting Docs Editors files to specific formats.
   * @param exportLinks exportLinks or {@code null} for none
   */
  public File setExportLinks(string[string] _exportLinks) {
    this._exportLinks = _exportLinks;
    return this;
  }

  /**
   * The final component of fullFileExtension. This is only available for files with binary content
   * in Google Drive.
   * @return value or {@code null} for none
   */
  public string getFileExtension() {
    return _fileExtension;
  }
  /**
   * The final component of fullFileExtension. This is only available for files with binary content
   * in Google Drive.
   * @param fileExtension fileExtension or {@code null} for none
   */
  public File setFileExtension(string _fileExtension) {
    this._fileExtension = _fileExtension;
    return this;
  }

  /**
   * The color for a folder as an RGB hex string. The supported colors are published in the
   * folderColorPalette field of the About resource. If an unsupported color is specified, the
   * closest color in the palette will be used instead.
   * @return value or {@code null} for none
   */
  public string getFolderColorRgb() {
    return _folderColorRgb;
  }
  /**
   * The color for a folder as an RGB hex string. The supported colors are published in the
   * folderColorPalette field of the About resource. If an unsupported color is specified, the
   * closest color in the palette will be used instead.
   * @param folderColorRgb folderColorRgb or {@code null} for none
   */
  public File setFolderColorRgb(string _folderColorRgb) {
    this._folderColorRgb = _folderColorRgb;
    return this;
  }

  /**
   * The full file extension extracted from the name field. May contain multiple concatenated
   * extensions, such as "tar.gz". This is only available for files with binary content in Google
   * Drive. This is automatically updated when the name field changes, however it is not cleared if
   * the new name does not contain a valid extension.
   * @return value or {@code null} for none
   */
  public string getFullFileExtension() {
    return _fullFileExtension;
  }
  /**
   * The full file extension extracted from the name field. May contain multiple concatenated
   * extensions, such as "tar.gz". This is only available for files with binary content in Google
   * Drive. This is automatically updated when the name field changes, however it is not cleared if
   * the new name does not contain a valid extension.
   * @param fullFileExtension fullFileExtension or {@code null} for none
   */
  public File setFullFileExtension(string _fullFileExtension) {
    this._fullFileExtension = _fullFileExtension;
    return this;
  }

  /**
   * Whether there are permissions directly on this file. This field is only populated for items in
   * shared drives.
   * @return value or {@code null} for none
   */
  public Nullable!bool getHasAugmentedPermissions() {
    return _hasAugmentedPermissions;
  }
  /**
   * Whether there are permissions directly on this file. This field is only populated for items in
   * shared drives.
   * @param hasAugmentedPermissions hasAugmentedPermissions or {@code null} for none
   */
  public File setHasAugmentedPermissions(Nullable!bool _hasAugmentedPermissions) {
    this._hasAugmentedPermissions = _hasAugmentedPermissions;
    return this;
  }

  /**
   * Whether this file has a thumbnail. This does not indicate whether the requesting app has access
   * to the thumbnail. To check access, look for the presence of the thumbnailLink field.
   * @return value or {@code null} for none
   */
  public Nullable!bool getHasThumbnail() {
    return _hasThumbnail;
  }
  /**
   * Whether this file has a thumbnail. This does not indicate whether the requesting app has access
   * to the thumbnail. To check access, look for the presence of the thumbnailLink field.
   * @param hasThumbnail hasThumbnail or {@code null} for none
   */
  public File setHasThumbnail(Nullable!bool _hasThumbnail) {
    this._hasThumbnail = _hasThumbnail;
    return this;
  }

  /**
   * The ID of the file's head revision. This is currently only available for files with binary
   * content in Google Drive.
   * @return value or {@code null} for none
   */
  public string getHeadRevisionId() {
    return _headRevisionId;
  }
  /**
   * The ID of the file's head revision. This is currently only available for files with binary
   * content in Google Drive.
   * @param headRevisionId headRevisionId or {@code null} for none
   */
  public File setHeadRevisionId(string _headRevisionId) {
    this._headRevisionId = _headRevisionId;
    return this;
  }

  /**
   * A static, unauthenticated link to the file's icon.
   * @return value or {@code null} for none
   */
  public string getIconLink() {
    return _iconLink;
  }
  /**
   * A static, unauthenticated link to the file's icon.
   * @param iconLink iconLink or {@code null} for none
   */
  public File setIconLink(string _iconLink) {
    this._iconLink = _iconLink;
    return this;
  }

  /**
   * The ID of the file.
   * @return value or {@code null} for none
   */
  public string getId() {
    return _id;
  }
  /**
   * The ID of the file.
   * @param id id or {@code null} for none
   */
  public File setId(string _id) {
    this._id = _id;
    return this;
  }

  /**
   * Additional metadata about image media, if available.
   * @return value or {@code null} for none
   */
  public ImageMediaMetadataData getImageMediaMetadata() {
    return _imageMediaMetadata;
  }
  /**
   * Additional metadata about image media, if available.
   * @param imageMediaMetadata imageMediaMetadata or {@code null} for none
   */
  public File setImageMediaMetadata(ImageMediaMetadataData _imageMediaMetadata) {
    this._imageMediaMetadata = _imageMediaMetadata;
    return this;
  }

  /**
   * Whether the file was created or opened by the requesting app.
   * @return value or {@code null} for none
   */
  public Nullable!bool getIsAppAuthorized() {
    return _isAppAuthorized;
  }
  /**
   * Whether the file was created or opened by the requesting app.
   * @param isAppAuthorized isAppAuthorized or {@code null} for none
   */
  public File setIsAppAuthorized(Nullable!bool _isAppAuthorized) {
    this._isAppAuthorized = _isAppAuthorized;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string "drive#file".
   * @return value or {@code null} for none
   */
  public string getKind() {
    return _kind;
  }
  /**
   * Identifies what kind of resource this is. Value: the fixed string "drive#file".
   * @param kind kind or {@code null} for none
   */
  public File setKind(string _kind) {
    this._kind = _kind;
    return this;
  }

  /**
   * The last user to modify the file.
   * @return value or {@code null} for none
   */
  public User getLastModifyingUser() {
    return _lastModifyingUser;
  }
  /**
   * The last user to modify the file.
   * @param lastModifyingUser lastModifyingUser or {@code null} for none
   */
  public File setLastModifyingUser(User _lastModifyingUser) {
    this._lastModifyingUser = _lastModifyingUser;
    return this;
  }

  /**
   * The MD5 checksum for the content of the file. This is only applicable to files with binary
   * content in Google Drive.
   * @return value or {@code null} for none
   */
  public string getMd5Checksum() {
    return _md5Checksum;
  }
  /**
   * The MD5 checksum for the content of the file. This is only applicable to files with binary
   * content in Google Drive.
   * @param md5Checksum md5Checksum or {@code null} for none
   */
  public File setMd5Checksum(string _md5Checksum) {
    this._md5Checksum = _md5Checksum;
    return this;
  }

  /**
   * The MIME type of the file. Google Drive will attempt to automatically detect an appropriate
   * value from uploaded content if no value is provided. The value cannot be changed unless a new
   * revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content
   * will be imported if possible. The supported import formats are published in the About resource.
   * @return value or {@code null} for none
   */
  public string getMimeType() {
    return _mimeType;
  }
  /**
   * The MIME type of the file. Google Drive will attempt to automatically detect an appropriate
   * value from uploaded content if no value is provided. The value cannot be changed unless a new
   * revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content
   * will be imported if possible. The supported import formats are published in the About resource.
   * @param mimeType mimeType or {@code null} for none
   */
  public File setMimeType(string _mimeType) {
    this._mimeType = _mimeType;
    return this;
  }

  /**
   * Whether the file has been modified by this user.
   * @return value or {@code null} for none
   */
  public Nullable!bool getModifiedByMe() {
    return _modifiedByMe;
  }
  /**
   * Whether the file has been modified by this user.
   * @param modifiedByMe modifiedByMe or {@code null} for none
   */
  public File setModifiedByMe(Nullable!bool _modifiedByMe) {
    this._modifiedByMe = _modifiedByMe;
    return this;
  }

  /**
   * The last time the file was modified by the user (RFC 3339 date-time).
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getModifiedByMeTime() {
    return _modifiedByMeTime;
  }
  /**
   * The last time the file was modified by the user (RFC 3339 date-time).
   * @param modifiedByMeTime modifiedByMeTime or {@code null} for none
   */
  public File setModifiedByMeTime(Nullable!SysTime _modifiedByMeTime) {
    this._modifiedByMeTime = _modifiedByMeTime;
    return this;
  }

  /**
   * The last time the file was modified by anyone (RFC 3339 date-time). Note that setting
   * modifiedTime will also update modifiedByMeTime for the user.
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getModifiedTime() {
    return _modifiedTime;
  }
  /**
   * The last time the file was modified by anyone (RFC 3339 date-time). Note that setting
   * modifiedTime will also update modifiedByMeTime for the user.
   * @param modifiedTime modifiedTime or {@code null} for none
   */
  public File setModifiedTime(Nullable!SysTime _modifiedTime) {
    this._modifiedTime = _modifiedTime;
    return this;
  }

  /**
   * The name of the file. This is not necessarily unique within a folder. Note that for immutable
   * items such as the top level folders of shared drives, My Drive root folder, and Application
   * Data folder the name is constant.
   * @return value or {@code null} for none
   */
  public string getName() {
    return _name;
  }
  /**
   * The name of the file. This is not necessarily unique within a folder. Note that for immutable
   * items such as the top level folders of shared drives, My Drive root folder, and Application
   * Data folder the name is constant.
   * @param name name or {@code null} for none
   */
  public File setName(string _name) {
    this._name = _name;
    return this;
  }

  /**
   * The original filename of the uploaded content if available, or else the original value of the
   * name field. This is only available for files with binary content in Google Drive.
   * @return value or {@code null} for none
   */
  public string getOriginalFilename() {
    return _originalFilename;
  }
  /**
   * The original filename of the uploaded content if available, or else the original value of the
   * name field. This is only available for files with binary content in Google Drive.
   * @param originalFilename originalFilename or {@code null} for none
   */
  public File setOriginalFilename(string _originalFilename) {
    this._originalFilename = _originalFilename;
    return this;
  }

  /**
   * Whether the user owns the file. Not populated for items in shared drives.
   * @return value or {@code null} for none
   */
  public Nullable!bool getOwnedByMe() {
    return _ownedByMe;
  }
  /**
   * Whether the user owns the file. Not populated for items in shared drives.
   * @param ownedByMe ownedByMe or {@code null} for none
   */
  public File setOwnedByMe(Nullable!bool _ownedByMe) {
    this._ownedByMe = _ownedByMe;
    return this;
  }

  /**
   * The owners of the file. Currently, only certain legacy files may have more than one owner. Not
   * populated for items in shared drives.
   * @return value or {@code null} for none
   */
  public User[] getOwners() {
    return _owners;
  }
  /**
   * The owners of the file. Currently, only certain legacy files may have more than one owner. Not
   * populated for items in shared drives.
   * @param owners owners or {@code null} for none
   */
  public File setOwners(User[] _owners) {
    this._owners = _owners;
    return this;
  }

  /**
   * The IDs of the parent folders which contain the file. If not specified as part of a create
   * request, the file will be placed directly in the user's My Drive folder. If not specified as
   * part of a copy request, the file will inherit any discoverable parents of the source file.
   * Update requests must use the addParents and removeParents parameters to modify the parents
   * list.
   * @return value or {@code null} for none
   */
  public string[] getParents() {
    return _parents;
  }
  /**
   * The IDs of the parent folders which contain the file. If not specified as part of a create
   * request, the file will be placed directly in the user's My Drive folder. If not specified as
   * part of a copy request, the file will inherit any discoverable parents of the source file.
   * Update requests must use the addParents and removeParents parameters to modify the parents
   * list.
   * @param parents parents or {@code null} for none
   */
  public File setParents(string[] _parents) {
    this._parents = _parents;
    return this;
  }

  /**
   * List of permission IDs for users with access to this file.
   * @return value or {@code null} for none
   */
  public string[] getPermissionIds() {
    return _permissionIds;
  }
  /**
   * List of permission IDs for users with access to this file.
   * @param permissionIds permissionIds or {@code null} for none
   */
  public File setPermissionIds(string[] _permissionIds) {
    this._permissionIds = _permissionIds;
    return this;
  }

  /**
   * The full list of permissions for the file. This is only available if the requesting user can
   * share the file. Not populated for items in shared drives.
   * @return value or {@code null} for none
   */
  public Permission[] getPermissions() {
    return _permissions;
  }
  /**
   * The full list of permissions for the file. This is only available if the requesting user can
   * share the file. Not populated for items in shared drives.
   * @param permissions permissions or {@code null} for none
   */
  public File setPermissions(Permission[] _permissions) {
    this._permissions = _permissions;
    return this;
  }

  /**
   * A collection of arbitrary key-value pairs which are visible to all apps. Entries with null
   * values are cleared in update and copy requests.
   * @return value or {@code null} for none
   */
  public string[string] getProperties() {
    return _properties;
  }
  /**
   * A collection of arbitrary key-value pairs which are visible to all apps. Entries with null
   * values are cleared in update and copy requests.
   * @param properties properties or {@code null} for none
   */
  public File setProperties(string[string] _properties) {
    this._properties = _properties;
    return this;
  }

  /**
   * The number of storage quota bytes used by the file. This includes the head revision as well as
   * previous revisions with keepForever enabled.
   * @return value or {@code null} for none
   */
  public MyNullable!long getQuotaBytesUsed() {
    return _quotaBytesUsed;
  }
  /**
   * The number of storage quota bytes used by the file. This includes the head revision as well as
   * previous revisions with keepForever enabled.
   * @param quotaBytesUsed quotaBytesUsed or {@code null} for none
   */
  public File setQuotaBytesUsed(MyNullable!long _quotaBytesUsed) {
    this._quotaBytesUsed = _quotaBytesUsed;
    return this;
  }

  /**
   * Whether the file has been shared. Not populated for items in shared drives.
   * @return value or {@code null} for none
   */
  public Nullable!bool getShared() {
    return _shared;
  }
  /**
   * Whether the file has been shared. Not populated for items in shared drives.
   * @param shared shared or {@code null} for none
   */
  public File setShared(Nullable!bool _shared) {
    this._shared = _shared;
    return this;
  }

  /**
   * The time at which the file was shared with the user, if applicable (RFC 3339 date-time).
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getSharedWithMeTime() {
    return _sharedWithMeTime;
  }
  /**
   * The time at which the file was shared with the user, if applicable (RFC 3339 date-time).
   * @param sharedWithMeTime sharedWithMeTime or {@code null} for none
   */
  public File setSharedWithMeTime(Nullable!SysTime _sharedWithMeTime) {
    this._sharedWithMeTime = _sharedWithMeTime;
    return this;
  }

  /**
   * The user who shared the file with the requesting user, if applicable.
   * @return value or {@code null} for none
   */
  public User getSharingUser() {
    return _sharingUser;
  }
  /**
   * The user who shared the file with the requesting user, if applicable.
   * @param sharingUser sharingUser or {@code null} for none
   */
  public File setSharingUser(User _sharingUser) {
    this._sharingUser = _sharingUser;
    return this;
  }

  /**
   * Shortcut file details. Only populated for shortcut files, which have the mimeType field set to
   * application/vnd.google-apps.shortcut.
   * @return value or {@code null} for none
   */
  public ShortcutDetailsData getShortcutDetails() {
    return _shortcutDetails;
  }
  /**
   * Shortcut file details. Only populated for shortcut files, which have the mimeType field set to
   * application/vnd.google-apps.shortcut.
   * @param shortcutDetails shortcutDetails or {@code null} for none
   */
  public File setShortcutDetails(ShortcutDetailsData _shortcutDetails) {
    this._shortcutDetails = _shortcutDetails;
    return this;
  }

  /**
   * The size of the file's content in bytes. This is applicable to binary files in Google Drive and
   * Google Docs files.
   * @return value or {@code null} for none
   */
  public MyNullable!long getSize() {
    return _size;
  }
  /**
   * The size of the file's content in bytes. This is applicable to binary files in Google Drive and
   * Google Docs files.
   * @param size size or {@code null} for none
   */
  public File setSize(MyNullable!long _size) {
    this._size = _size;
    return this;
  }

  /**
   * The list of spaces which contain the file. The currently supported values are 'drive',
   * 'appDataFolder' and 'photos'.
   * @return value or {@code null} for none
   */
  public string[] getSpaces() {
    return _spaces;
  }
  /**
   * The list of spaces which contain the file. The currently supported values are 'drive',
   * 'appDataFolder' and 'photos'.
   * @param spaces spaces or {@code null} for none
   */
  public File setSpaces(string[] _spaces) {
    this._spaces = _spaces;
    return this;
  }

  /**
   * Whether the user has starred the file.
   * @return value or {@code null} for none
   */
  public Nullable!bool getStarred() {
    return _starred;
  }
  /**
   * Whether the user has starred the file.
   * @param starred starred or {@code null} for none
   */
  public File setStarred(Nullable!bool _starred) {
    this._starred = _starred;
    return this;
  }

  /**
   * Deprecated - use driveId instead.
   * @return value or {@code null} for none
   */
  public string getTeamDriveId() {
    return _teamDriveId;
  }
  /**
   * Deprecated - use driveId instead.
   * @param teamDriveId teamDriveId or {@code null} for none
   */
  public File setTeamDriveId(string _teamDriveId) {
    this._teamDriveId = _teamDriveId;
    return this;
  }

  /**
   * A short-lived link to the file's thumbnail, if available. Typically lasts on the order of
   * hours. Only populated when the requesting app can access the file's content. If the file isn't
   * shared publicly, the URL returned in Files.thumbnailLink must be fetched using a credentialed
   * request.
   * @return value or {@code null} for none
   */
  public string getThumbnailLink() {
    return _thumbnailLink;
  }
  /**
   * A short-lived link to the file's thumbnail, if available. Typically lasts on the order of
   * hours. Only populated when the requesting app can access the file's content. If the file isn't
   * shared publicly, the URL returned in Files.thumbnailLink must be fetched using a credentialed
   * request.
   * @param thumbnailLink thumbnailLink or {@code null} for none
   */
  public File setThumbnailLink(string _thumbnailLink) {
    this._thumbnailLink = _thumbnailLink;
    return this;
  }

  /**
   * The thumbnail version for use in thumbnail cache invalidation.
   * @return value or {@code null} for none
   */
  public MyNullable!long getThumbnailVersion() {
    return _thumbnailVersion;
  }
  /**
   * The thumbnail version for use in thumbnail cache invalidation.
   * @param thumbnailVersion thumbnailVersion or {@code null} for none
   */
  public File setThumbnailVersion(MyNullable!long _thumbnailVersion) {
    this._thumbnailVersion = _thumbnailVersion;
    return this;
  }

  /**
   * Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the
   * owner may trash a file. The trashed item is excluded from all files.list responses returned for
   * any user who does not own the file. However, all users with access to the file can see the
   * trashed item metadata in an API response. All users with access can copy, download, export, and
   * share the file.
   * @return value or {@code null} for none
   */
  public Nullable!bool getTrashed() {
    return _trashed;
  }
  /**
   * Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the
   * owner may trash a file. The trashed item is excluded from all files.list responses returned for
   * any user who does not own the file. However, all users with access to the file can see the
   * trashed item metadata in an API response. All users with access can copy, download, export, and
   * share the file.
   * @param trashed trashed or {@code null} for none
   */
  public File setTrashed(Nullable!bool _trashed) {
    this._trashed = _trashed;
    return this;
  }

  /**
   * The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared
   * drives.
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getTrashedTime() {
    return _trashedTime;
  }
  /**
   * The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared
   * drives.
   * @param trashedTime trashedTime or {@code null} for none
   */
  public File setTrashedTime(Nullable!SysTime _trashedTime) {
    this._trashedTime = _trashedTime;
    return this;
  }

  /**
   * If the file has been explicitly trashed, the user who trashed it. Only populated for items in
   * shared drives.
   * @return value or {@code null} for none
   */
  public User getTrashingUser() {
    return _trashingUser;
  }
  /**
   * If the file has been explicitly trashed, the user who trashed it. Only populated for items in
   * shared drives.
   * @param trashingUser trashingUser or {@code null} for none
   */
  public File setTrashingUser(User _trashingUser) {
    this._trashingUser = _trashingUser;
    return this;
  }

  /**
   * A monotonically increasing version number for the file. This reflects every change made to the
   * file on the server, even those not visible to the user.
   * @return value or {@code null} for none
   */
  public MyNullable!long getVersion() {
    return _version;
  }
  /**
   * A monotonically increasing version number for the file. This reflects every change made to the
   * file on the server, even those not visible to the user.
   * @param version version or {@code null} for none
   */
  public File setVersion(MyNullable!long _version) {
    this._version = _version;
    return this;
  }

  /**
   * Additional metadata about video media. This may not be available immediately upon upload.
   * @return value or {@code null} for none
   */
  public VideoMediaMetadataData getVideoMediaMetadata() {
    return _videoMediaMetadata;
  }
  /**
   * Additional metadata about video media. This may not be available immediately upon upload.
   * @param videoMediaMetadata videoMediaMetadata or {@code null} for none
   */
  public File setVideoMediaMetadata(VideoMediaMetadataData _videoMediaMetadata) {
    this._videoMediaMetadata = _videoMediaMetadata;
    return this;
  }

  /**
   * Whether the file has been viewed by this user.
   * @return value or {@code null} for none
   */
  public Nullable!bool getViewedByMe() {
    return _viewedByMe;
  }
  /**
   * Whether the file has been viewed by this user.
   * @param viewedByMe viewedByMe or {@code null} for none
   */
  public File setViewedByMe(Nullable!bool _viewedByMe) {
    this._viewedByMe = _viewedByMe;
    return this;
  }

  /**
   * The last time the file was viewed by the user (RFC 3339 date-time).
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getViewedByMeTime() {
    return _viewedByMeTime;
  }
  /**
   * The last time the file was viewed by the user (RFC 3339 date-time).
   * @param viewedByMeTime viewedByMeTime or {@code null} for none
   */
  public File setViewedByMeTime(Nullable!SysTime _viewedByMeTime) {
    this._viewedByMeTime = _viewedByMeTime;
    return this;
  }

  /**
   * Deprecated - use copyRequiresWriterPermission instead.
   * @return value or {@code null} for none
   */
  public Nullable!bool getViewersCanCopyContent() {
    return _viewersCanCopyContent;
  }
  /**
   * Deprecated - use copyRequiresWriterPermission instead.
   * @param viewersCanCopyContent viewersCanCopyContent or {@code null} for none
   */
  public File setViewersCanCopyContent(Nullable!bool _viewersCanCopyContent) {
    this._viewersCanCopyContent = _viewersCanCopyContent;
    return this;
  }

  /**
   * A link for downloading the content of the file in a browser. This is only available for files
   * with binary content in Google Drive.
   * @return value or {@code null} for none
   */
  public string getWebContentLink() {
    return _webContentLink;
  }
  /**
   * A link for downloading the content of the file in a browser. This is only available for files
   * with binary content in Google Drive.
   * @param webContentLink webContentLink or {@code null} for none
   */
  public File setWebContentLink(string _webContentLink) {
    this._webContentLink = _webContentLink;
    return this;
  }

  /**
   * A link for opening the file in a relevant Google editor or viewer in a browser.
   * @return value or {@code null} for none
   */
  public string getWebViewLink() {
    return _webViewLink;
  }
  /**
   * A link for opening the file in a relevant Google editor or viewer in a browser.
   * @param webViewLink webViewLink or {@code null} for none
   */
  public File setWebViewLink(string _webViewLink) {
    this._webViewLink = _webViewLink;
    return this;
  }

  /**
   * Whether users with only writer permission can modify the file's permissions. Not populated for
   * items in shared drives.
   * @return value or {@code null} for none
   */
  public Nullable!bool getWritersCanShare() {
    return _writersCanShare;
  }
  /**
   * Whether users with only writer permission can modify the file's permissions. Not populated for
   * items in shared drives.
   * @param writersCanShare writersCanShare or {@code null} for none
   */
  public File setWritersCanShare(Nullable!bool _writersCanShare) {
    this._writersCanShare = _writersCanShare;
    return this;
  }

  /**
   * Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
   */
  public struct CapabilitiesData {

    /**
     * Whether the current user can add children to this folder. This is always false when the item is
     * not a folder.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canAddChildren;

    /**
     * Whether the current user can add a folder from another drive (different shared drive or My
     * Drive) to this folder. This is false when the item is not a folder. Only populated for items in
     * shared drives.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canAddFolderFromAnotherDrive;

    /**
     * Whether the current user can add a parent for the item without removing an existing parent in
     * the same request. Not populated for shared drive files.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canAddMyDriveParent;

    /**
     * Whether the current user can change the copyRequiresWriterPermission restriction of this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canChangeCopyRequiresWriterPermission;

    /**
     * Deprecated
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canChangeViewersCanCopyContent;

    /**
     * Whether the current user can comment on this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canComment;

    /**
     * Whether the current user can copy this file. For an item in a shared drive, whether the current
     * user can copy non-folder descendants of this item, or this item itself if it is not a folder.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canCopy;

    /**
     * Whether the current user can delete this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canDelete;

    /**
     * Whether the current user can delete children of this folder. This is false when the item is not
     * a folder. Only populated for items in shared drives.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canDeleteChildren;

    /**
     * Whether the current user can download this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canDownload;

    /**
     * Whether the current user can edit this file. Other factors may limit the type of changes a user
     * can make to a file. For example, see canChangeCopyRequiresWriterPermission or canModifyContent.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canEdit;

    /**
     * Whether the current user can list the children of this folder. This is always false when the
     * item is not a folder.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canListChildren;

    /**
     * Whether the current user can modify the content of this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canModifyContent;

    /**
     * Whether the current user can modify restrictions on content of this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canModifyContentRestriction;

    /**
     * Whether the current user can move children of this folder outside of the shared drive. This is
     * false when the item is not a folder. Only populated for items in shared drives.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveChildrenOutOfDrive;

    /**
     * Deprecated - use canMoveChildrenOutOfDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveChildrenOutOfTeamDrive;

    /**
     * Whether the current user can move children of this folder within this drive. This is false when
     * the item is not a folder. Note that a request to move the child may still fail depending on the
     * current user's access to the child and to the destination folder.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveChildrenWithinDrive;

    /**
     * Deprecated - use canMoveChildrenWithinDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveChildrenWithinTeamDrive;

    /**
     * Deprecated - use canMoveItemOutOfDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveItemIntoTeamDrive;

    /**
     * Whether the current user can move this item outside of this drive by changing its parent. Note
     * that a request to change the parent of the item may still fail depending on the new parent that
     * is being added.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveItemOutOfDrive;

    /**
     * Deprecated - use canMoveItemOutOfDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveItemOutOfTeamDrive;

    /**
     * Whether the current user can move this item within this drive. Note that a request to change
     * the parent of the item may still fail depending on the new parent that is being added and the
     * parent that is being removed.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveItemWithinDrive;

    /**
     * Deprecated - use canMoveItemWithinDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveItemWithinTeamDrive;

    /**
     * Deprecated - use canMoveItemWithinDrive or canMoveItemOutOfDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canMoveTeamDriveItem;

    /**
     * Whether the current user can read the shared drive to which this file belongs. Only populated
     * for items in shared drives.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canReadDrive;

    /**
     * Whether the current user can read the revisions resource of this file. For a shared drive item,
     * whether revisions of non-folder descendants of this item, or this item itself if it is not a
     * folder, can be read.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canReadRevisions;

    /**
     * Deprecated - use canReadDrive instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canReadTeamDrive;

    /**
     * Whether the current user can remove children from this folder. This is always false when the
     * item is not a folder. For a folder in a shared drive, use canDeleteChildren or canTrashChildren
     * instead.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canRemoveChildren;

    /**
     * Whether the current user can remove a parent from the item without adding another parent in the
     * same request. Not populated for shared drive files.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canRemoveMyDriveParent;

    /**
     * Whether the current user can rename this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canRename;

    /**
     * Whether the current user can modify the sharing settings for this file.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canShare;

    /**
     * Whether the current user can move this file to trash.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canTrash;

    /**
     * Whether the current user can trash children of this folder. This is false when the item is not
     * a folder. Only populated for items in shared drives.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canTrashChildren;

    /**
     * Whether the current user can restore this file from trash.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _canUntrash;

    /**
     * Whether the current user can add children to this folder. This is always false when the item is
     * not a folder.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanAddChildren() {
      return _canAddChildren;
    }
    /**
     * Whether the current user can add children to this folder. This is always false when the item is
     * not a folder.
     * @param canAddChildren canAddChildren or {@code null} for none
     */
    public CapabilitiesData setCanAddChildren(Nullable!bool _canAddChildren) {
      this._canAddChildren = _canAddChildren;
      return this;
    }

    /**
     * Whether the current user can add a folder from another drive (different shared drive or My
     * Drive) to this folder. This is false when the item is not a folder. Only populated for items in
     * shared drives.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanAddFolderFromAnotherDrive() {
      return _canAddFolderFromAnotherDrive;
    }
    /**
     * Whether the current user can add a folder from another drive (different shared drive or My
     * Drive) to this folder. This is false when the item is not a folder. Only populated for items in
     * shared drives.
     * @param canAddFolderFromAnotherDrive canAddFolderFromAnotherDrive or {@code null} for none
     */
    public CapabilitiesData setCanAddFolderFromAnotherDrive(Nullable!bool _canAddFolderFromAnotherDrive) {
      this._canAddFolderFromAnotherDrive = _canAddFolderFromAnotherDrive;
      return this;
    }

    /**
     * Whether the current user can add a parent for the item without removing an existing parent in
     * the same request. Not populated for shared drive files.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanAddMyDriveParent() {
      return _canAddMyDriveParent;
    }
    /**
     * Whether the current user can add a parent for the item without removing an existing parent in
     * the same request. Not populated for shared drive files.
     * @param canAddMyDriveParent canAddMyDriveParent or {@code null} for none
     */
    public CapabilitiesData setCanAddMyDriveParent(Nullable!bool _canAddMyDriveParent) {
      this._canAddMyDriveParent = _canAddMyDriveParent;
      return this;
    }

    /**
     * Whether the current user can change the copyRequiresWriterPermission restriction of this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanChangeCopyRequiresWriterPermission() {
      return _canChangeCopyRequiresWriterPermission;
    }
    /**
     * Whether the current user can change the copyRequiresWriterPermission restriction of this file.
     * @param canChangeCopyRequiresWriterPermission canChangeCopyRequiresWriterPermission or {@code null} for none
     */
    public CapabilitiesData setCanChangeCopyRequiresWriterPermission(Nullable!bool _canChangeCopyRequiresWriterPermission) {
      this._canChangeCopyRequiresWriterPermission = _canChangeCopyRequiresWriterPermission;
      return this;
    }

    /**
     * Deprecated
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanChangeViewersCanCopyContent() {
      return _canChangeViewersCanCopyContent;
    }
    /**
     * Deprecated
     * @param canChangeViewersCanCopyContent canChangeViewersCanCopyContent or {@code null} for none
     */
    public CapabilitiesData setCanChangeViewersCanCopyContent(Nullable!bool _canChangeViewersCanCopyContent) {
      this._canChangeViewersCanCopyContent = _canChangeViewersCanCopyContent;
      return this;
    }

    /**
     * Whether the current user can comment on this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanComment() {
      return _canComment;
    }
    /**
     * Whether the current user can comment on this file.
     * @param canComment canComment or {@code null} for none
     */
    public CapabilitiesData setCanComment(Nullable!bool _canComment) {
      this._canComment = _canComment;
      return this;
    }

    /**
     * Whether the current user can copy this file. For an item in a shared drive, whether the current
     * user can copy non-folder descendants of this item, or this item itself if it is not a folder.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanCopy() {
      return _canCopy;
    }
    /**
     * Whether the current user can copy this file. For an item in a shared drive, whether the current
     * user can copy non-folder descendants of this item, or this item itself if it is not a folder.
     * @param canCopy canCopy or {@code null} for none
     */
    public CapabilitiesData setCanCopy(Nullable!bool _canCopy) {
      this._canCopy = _canCopy;
      return this;
    }

    /**
     * Whether the current user can delete this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanDelete() {
      return _canDelete;
    }
    /**
     * Whether the current user can delete this file.
     * @param canDelete canDelete or {@code null} for none
     */
    public CapabilitiesData setCanDelete(Nullable!bool _canDelete) {
      this._canDelete = _canDelete;
      return this;
    }

    /**
     * Whether the current user can delete children of this folder. This is false when the item is not
     * a folder. Only populated for items in shared drives.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanDeleteChildren() {
      return _canDeleteChildren;
    }
    /**
     * Whether the current user can delete children of this folder. This is false when the item is not
     * a folder. Only populated for items in shared drives.
     * @param canDeleteChildren canDeleteChildren or {@code null} for none
     */
    public CapabilitiesData setCanDeleteChildren(Nullable!bool _canDeleteChildren) {
      this._canDeleteChildren = _canDeleteChildren;
      return this;
    }

    /**
     * Whether the current user can download this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanDownload() {
      return _canDownload;
    }
    /**
     * Whether the current user can download this file.
     * @param canDownload canDownload or {@code null} for none
     */
    public CapabilitiesData setCanDownload(Nullable!bool _canDownload) {
      this._canDownload = _canDownload;
      return this;
    }

    /**
     * Whether the current user can edit this file. Other factors may limit the type of changes a user
     * can make to a file. For example, see canChangeCopyRequiresWriterPermission or canModifyContent.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanEdit() {
      return _canEdit;
    }
    /**
     * Whether the current user can edit this file. Other factors may limit the type of changes a user
     * can make to a file. For example, see canChangeCopyRequiresWriterPermission or canModifyContent.
     * @param canEdit canEdit or {@code null} for none
     */
    public CapabilitiesData setCanEdit(Nullable!bool _canEdit) {
      this._canEdit = _canEdit;
      return this;
    }

    /**
     * Whether the current user can list the children of this folder. This is always false when the
     * item is not a folder.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanListChildren() {
      return _canListChildren;
    }
    /**
     * Whether the current user can list the children of this folder. This is always false when the
     * item is not a folder.
     * @param canListChildren canListChildren or {@code null} for none
     */
    public CapabilitiesData setCanListChildren(Nullable!bool _canListChildren) {
      this._canListChildren = _canListChildren;
      return this;
    }

    /**
     * Whether the current user can modify the content of this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanModifyContent() {
      return _canModifyContent;
    }
    /**
     * Whether the current user can modify the content of this file.
     * @param canModifyContent canModifyContent or {@code null} for none
     */
    public CapabilitiesData setCanModifyContent(Nullable!bool _canModifyContent) {
      this._canModifyContent = _canModifyContent;
      return this;
    }

    /**
     * Whether the current user can modify restrictions on content of this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanModifyContentRestriction() {
      return _canModifyContentRestriction;
    }
    /**
     * Whether the current user can modify restrictions on content of this file.
     * @param canModifyContentRestriction canModifyContentRestriction or {@code null} for none
     */
    public CapabilitiesData setCanModifyContentRestriction(Nullable!bool _canModifyContentRestriction) {
      this._canModifyContentRestriction = _canModifyContentRestriction;
      return this;
    }

    /**
     * Whether the current user can move children of this folder outside of the shared drive. This is
     * false when the item is not a folder. Only populated for items in shared drives.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveChildrenOutOfDrive() {
      return _canMoveChildrenOutOfDrive;
    }
    /**
     * Whether the current user can move children of this folder outside of the shared drive. This is
     * false when the item is not a folder. Only populated for items in shared drives.
     * @param canMoveChildrenOutOfDrive canMoveChildrenOutOfDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveChildrenOutOfDrive(Nullable!bool _canMoveChildrenOutOfDrive) {
      this._canMoveChildrenOutOfDrive = _canMoveChildrenOutOfDrive;
      return this;
    }

    /**
     * Deprecated - use canMoveChildrenOutOfDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveChildrenOutOfTeamDrive() {
      return _canMoveChildrenOutOfTeamDrive;
    }
    /**
     * Deprecated - use canMoveChildrenOutOfDrive instead.
     * @param canMoveChildrenOutOfTeamDrive canMoveChildrenOutOfTeamDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveChildrenOutOfTeamDrive(Nullable!bool _canMoveChildrenOutOfTeamDrive) {
      this._canMoveChildrenOutOfTeamDrive = _canMoveChildrenOutOfTeamDrive;
      return this;
    }

    /**
     * Whether the current user can move children of this folder within this drive. This is false when
     * the item is not a folder. Note that a request to move the child may still fail depending on the
     * current user's access to the child and to the destination folder.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveChildrenWithinDrive() {
      return _canMoveChildrenWithinDrive;
    }
    /**
     * Whether the current user can move children of this folder within this drive. This is false when
     * the item is not a folder. Note that a request to move the child may still fail depending on the
     * current user's access to the child and to the destination folder.
     * @param canMoveChildrenWithinDrive canMoveChildrenWithinDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveChildrenWithinDrive(Nullable!bool _canMoveChildrenWithinDrive) {
      this._canMoveChildrenWithinDrive = _canMoveChildrenWithinDrive;
      return this;
    }

    /**
     * Deprecated - use canMoveChildrenWithinDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveChildrenWithinTeamDrive() {
      return _canMoveChildrenWithinTeamDrive;
    }
    /**
     * Deprecated - use canMoveChildrenWithinDrive instead.
     * @param canMoveChildrenWithinTeamDrive canMoveChildrenWithinTeamDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveChildrenWithinTeamDrive(Nullable!bool _canMoveChildrenWithinTeamDrive) {
      this._canMoveChildrenWithinTeamDrive = _canMoveChildrenWithinTeamDrive;
      return this;
    }

    /**
     * Deprecated - use canMoveItemOutOfDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveItemIntoTeamDrive() {
      return _canMoveItemIntoTeamDrive;
    }
    /**
     * Deprecated - use canMoveItemOutOfDrive instead.
     * @param canMoveItemIntoTeamDrive canMoveItemIntoTeamDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveItemIntoTeamDrive(Nullable!bool _canMoveItemIntoTeamDrive) {
      this._canMoveItemIntoTeamDrive = _canMoveItemIntoTeamDrive;
      return this;
    }

    /**
     * Whether the current user can move this item outside of this drive by changing its parent. Note
     * that a request to change the parent of the item may still fail depending on the new parent that
     * is being added.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveItemOutOfDrive() {
      return _canMoveItemOutOfDrive;
    }
    /**
     * Whether the current user can move this item outside of this drive by changing its parent. Note
     * that a request to change the parent of the item may still fail depending on the new parent that
     * is being added.
     * @param canMoveItemOutOfDrive canMoveItemOutOfDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveItemOutOfDrive(Nullable!bool _canMoveItemOutOfDrive) {
      this._canMoveItemOutOfDrive = _canMoveItemOutOfDrive;
      return this;
    }

    /**
     * Deprecated - use canMoveItemOutOfDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveItemOutOfTeamDrive() {
      return _canMoveItemOutOfTeamDrive;
    }
    /**
     * Deprecated - use canMoveItemOutOfDrive instead.
     * @param canMoveItemOutOfTeamDrive canMoveItemOutOfTeamDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveItemOutOfTeamDrive(Nullable!bool _canMoveItemOutOfTeamDrive) {
      this._canMoveItemOutOfTeamDrive = _canMoveItemOutOfTeamDrive;
      return this;
    }

    /**
     * Whether the current user can move this item within this drive. Note that a request to change
     * the parent of the item may still fail depending on the new parent that is being added and the
     * parent that is being removed.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveItemWithinDrive() {
      return _canMoveItemWithinDrive;
    }
    /**
     * Whether the current user can move this item within this drive. Note that a request to change
     * the parent of the item may still fail depending on the new parent that is being added and the
     * parent that is being removed.
     * @param canMoveItemWithinDrive canMoveItemWithinDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveItemWithinDrive(Nullable!bool _canMoveItemWithinDrive) {
      this._canMoveItemWithinDrive = _canMoveItemWithinDrive;
      return this;
    }

    /**
     * Deprecated - use canMoveItemWithinDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveItemWithinTeamDrive() {
      return _canMoveItemWithinTeamDrive;
    }
    /**
     * Deprecated - use canMoveItemWithinDrive instead.
     * @param canMoveItemWithinTeamDrive canMoveItemWithinTeamDrive or {@code null} for none
     */
    public CapabilitiesData setCanMoveItemWithinTeamDrive(Nullable!bool _canMoveItemWithinTeamDrive) {
      this._canMoveItemWithinTeamDrive = _canMoveItemWithinTeamDrive;
      return this;
    }

    /**
     * Deprecated - use canMoveItemWithinDrive or canMoveItemOutOfDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanMoveTeamDriveItem() {
      return _canMoveTeamDriveItem;
    }
    /**
     * Deprecated - use canMoveItemWithinDrive or canMoveItemOutOfDrive instead.
     * @param canMoveTeamDriveItem canMoveTeamDriveItem or {@code null} for none
     */
    public CapabilitiesData setCanMoveTeamDriveItem(Nullable!bool _canMoveTeamDriveItem) {
      this._canMoveTeamDriveItem = _canMoveTeamDriveItem;
      return this;
    }

    /**
     * Whether the current user can read the shared drive to which this file belongs. Only populated
     * for items in shared drives.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanReadDrive() {
      return _canReadDrive;
    }
    /**
     * Whether the current user can read the shared drive to which this file belongs. Only populated
     * for items in shared drives.
     * @param canReadDrive canReadDrive or {@code null} for none
     */
    public CapabilitiesData setCanReadDrive(Nullable!bool _canReadDrive) {
      this._canReadDrive = _canReadDrive;
      return this;
    }

    /**
     * Whether the current user can read the revisions resource of this file. For a shared drive item,
     * whether revisions of non-folder descendants of this item, or this item itself if it is not a
     * folder, can be read.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanReadRevisions() {
      return _canReadRevisions;
    }
    /**
     * Whether the current user can read the revisions resource of this file. For a shared drive item,
     * whether revisions of non-folder descendants of this item, or this item itself if it is not a
     * folder, can be read.
     * @param canReadRevisions canReadRevisions or {@code null} for none
     */
    public CapabilitiesData setCanReadRevisions(Nullable!bool _canReadRevisions) {
      this._canReadRevisions = _canReadRevisions;
      return this;
    }

    /**
     * Deprecated - use canReadDrive instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanReadTeamDrive() {
      return _canReadTeamDrive;
    }
    /**
     * Deprecated - use canReadDrive instead.
     * @param canReadTeamDrive canReadTeamDrive or {@code null} for none
     */
    public CapabilitiesData setCanReadTeamDrive(Nullable!bool _canReadTeamDrive) {
      this._canReadTeamDrive = _canReadTeamDrive;
      return this;
    }

    /**
     * Whether the current user can remove children from this folder. This is always false when the
     * item is not a folder. For a folder in a shared drive, use canDeleteChildren or canTrashChildren
     * instead.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanRemoveChildren() {
      return _canRemoveChildren;
    }
    /**
     * Whether the current user can remove children from this folder. This is always false when the
     * item is not a folder. For a folder in a shared drive, use canDeleteChildren or canTrashChildren
     * instead.
     * @param canRemoveChildren canRemoveChildren or {@code null} for none
     */
    public CapabilitiesData setCanRemoveChildren(Nullable!bool _canRemoveChildren) {
      this._canRemoveChildren = _canRemoveChildren;
      return this;
    }

    /**
     * Whether the current user can remove a parent from the item without adding another parent in the
     * same request. Not populated for shared drive files.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanRemoveMyDriveParent() {
      return _canRemoveMyDriveParent;
    }
    /**
     * Whether the current user can remove a parent from the item without adding another parent in the
     * same request. Not populated for shared drive files.
     * @param canRemoveMyDriveParent canRemoveMyDriveParent or {@code null} for none
     */
    public CapabilitiesData setCanRemoveMyDriveParent(Nullable!bool _canRemoveMyDriveParent) {
      this._canRemoveMyDriveParent = _canRemoveMyDriveParent;
      return this;
    }

    /**
     * Whether the current user can rename this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanRename() {
      return _canRename;
    }
    /**
     * Whether the current user can rename this file.
     * @param canRename canRename or {@code null} for none
     */
    public CapabilitiesData setCanRename(Nullable!bool _canRename) {
      this._canRename = _canRename;
      return this;
    }

    /**
     * Whether the current user can modify the sharing settings for this file.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanShare() {
      return _canShare;
    }
    /**
     * Whether the current user can modify the sharing settings for this file.
     * @param canShare canShare or {@code null} for none
     */
    public CapabilitiesData setCanShare(Nullable!bool _canShare) {
      this._canShare = _canShare;
      return this;
    }

    /**
     * Whether the current user can move this file to trash.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanTrash() {
      return _canTrash;
    }
    /**
     * Whether the current user can move this file to trash.
     * @param canTrash canTrash or {@code null} for none
     */
    public CapabilitiesData setCanTrash(Nullable!bool _canTrash) {
      this._canTrash = _canTrash;
      return this;
    }

    /**
     * Whether the current user can trash children of this folder. This is false when the item is not
     * a folder. Only populated for items in shared drives.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanTrashChildren() {
      return _canTrashChildren;
    }
    /**
     * Whether the current user can trash children of this folder. This is false when the item is not
     * a folder. Only populated for items in shared drives.
     * @param canTrashChildren canTrashChildren or {@code null} for none
     */
    public CapabilitiesData setCanTrashChildren(Nullable!bool _canTrashChildren) {
      this._canTrashChildren = _canTrashChildren;
      return this;
    }

    /**
     * Whether the current user can restore this file from trash.
     * @return value or {@code null} for none
     */
    public Nullable!bool getCanUntrash() {
      return _canUntrash;
    }
    /**
     * Whether the current user can restore this file from trash.
     * @param canUntrash canUntrash or {@code null} for none
     */
    public CapabilitiesData setCanUntrash(Nullable!bool _canUntrash) {
      this._canUntrash = _canUntrash;
      return this;
    }

  }

  /**
   * Additional information about the content of the file. These fields are never populated in responses.
   */
  public struct ContentHintsData {

    /**
     * Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length
     * and may contain HTML elements.
     * The value may be {@code null}.
     */
    @optional public string _indexableText;

    /**
     * A thumbnail for the file. This will only be used if Google Drive cannot generate a standard
     * thumbnail.
     * The value may be {@code null}.
     */
    @optional public ThumbnailData _thumbnail;

    /**
     * Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length
     * and may contain HTML elements.
     * @return value or {@code null} for none
     */
    public string getIndexableText() {
      return _indexableText;
    }
    /**
     * Text to be indexed for the file to improve fullText queries. This is limited to 128KB in length
     * and may contain HTML elements.
     * @param indexableText indexableText or {@code null} for none
     */
    public ContentHintsData setIndexableText(string _indexableText) {
      this._indexableText = _indexableText;
      return this;
    }

    /**
     * A thumbnail for the file. This will only be used if Google Drive cannot generate a standard
     * thumbnail.
     * @return value or {@code null} for none
     */
    public ThumbnailData getThumbnail() {
      return _thumbnail;
    }
    /**
     * A thumbnail for the file. This will only be used if Google Drive cannot generate a standard
     * thumbnail.
     * @param thumbnail thumbnail or {@code null} for none
     */
    public ContentHintsData setThumbnail(ThumbnailData _thumbnail) {
      this._thumbnail = _thumbnail;
      return this;
    }

    /**
     * A thumbnail for the file. This will only be used if Google Drive cannot generate a standard thumbnail.
     */
    public struct ThumbnailData {

      /**
       * The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
       * The value may be {@code null}.
       */
      @optional public string _image;

      /**
       * The MIME type of the thumbnail.
       * The value may be {@code null}.
       */
      @optional public string _mimeType;

      /**
       * The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
       * @return value or {@code null} for none
       */
      public string getImage() {
        return _image;
      }
      /**
       * The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
       * @see #encodeImage()
       * @param image image or {@code null} for none
       */
      public ThumbnailData setImage(string _image) {
        this._image = _image;
        return this;
      }

      /**
       * The thumbnail data encoded with URL-safe Base64 (RFC 4648 section 5).
       * @see #setImage()
       *
       * <p>
       * The value is encoded Base64 or {@code null} for none.
       * </p>
       *
       * @since 1.14
       */
      public ThumbnailData encodeImage(byte[] image) {
        import std.conv: to;
        this._image = to!(string)(image);
        return this;
      }

      /**
       * The MIME type of the thumbnail.
       * @return value or {@code null} for none
       */
      public string getMimeType() {
        return _mimeType;
      }
      /**
       * The MIME type of the thumbnail.
       * @param mimeType mimeType or {@code null} for none
       */
      public ThumbnailData setMimeType(string _mimeType) {
        this._mimeType = _mimeType;
        return this;
      }

    }
  }

  /**
   * Additional metadata about image media, if available.
   */
  public struct ImageMediaMetadataData {

    /**
     * The aperture used to create the photo (f-number).
     * The value may be {@code null}.
     */
    @optional public MyNullable!float _aperture;

    /**
     * The make of the camera used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _cameraMake;

    /**
     * The model of the camera used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _cameraModel;

    /**
     * The color space of the photo.
     * The value may be {@code null}.
     */
    @optional public string _colorSpace;

    /**
     * The exposure bias of the photo (APEX value).
     * The value may be {@code null}.
     */
    @optional public MyNullable!float _exposureBias;

    /**
     * The exposure mode used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _exposureMode;

    /**
     * The length of the exposure, in seconds.
     * The value may be {@code null}.
     */
    @optional public MyNullable!float _exposureTime;

    /**
     * Whether a flash was used to create the photo.
     * The value may be {@code null}.
     */
    @optional public Nullable!bool _flashUsed;

    /**
     * The focal length used to create the photo, in millimeters.
     * The value may be {@code null}.
     */
    @optional public MyNullable!float _focalLength;

    /**
     * The height of the image in pixels.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _height;

    /**
     * The ISO speed used to create the photo.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _isoSpeed;

    /**
     * The lens used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _lens;

    /**
     * Geographic location information stored in the image.
     * The value may be {@code null}.
     */
    @optional public LocationData _location;

    /**
     * The smallest f-number of the lens at the focal length used to create the photo (APEX value).
     * The value may be {@code null}.
     */
    @optional public MyNullable!float _maxApertureValue;

    /**
     * The metering mode used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _meteringMode;

    /**
     * The number of clockwise 90 degree rotations applied from the image's original orientation.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _rotation;

    /**
     * The type of sensor used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _sensor;

    /**
     * The distance to the subject of the photo, in meters.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _subjectDistance;

    /**
     * The date and time the photo was taken (EXIF DateTime).
     * The value may be {@code null}.
     */
    @optional public string _time;

    /**
     * The white balance mode used to create the photo.
     * The value may be {@code null}.
     */
    @optional public string _whiteBalance;

    /**
     * The width of the image in pixels.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _width;

    /**
     * The aperture used to create the photo (f-number).
     * @return value or {@code null} for none
     */
    public MyNullable!float getAperture() {
      return _aperture;
    }
    /**
     * The aperture used to create the photo (f-number).
     * @param aperture aperture or {@code null} for none
     */
    public ImageMediaMetadataData setAperture(MyNullable!float _aperture) {
      this._aperture = _aperture;
      return this;
    }

    /**
     * The make of the camera used to create the photo.
     * @return value or {@code null} for none
     */
    public string getCameraMake() {
      return _cameraMake;
    }
    /**
     * The make of the camera used to create the photo.
     * @param cameraMake cameraMake or {@code null} for none
     */
    public ImageMediaMetadataData setCameraMake(string _cameraMake) {
      this._cameraMake = _cameraMake;
      return this;
    }

    /**
     * The model of the camera used to create the photo.
     * @return value or {@code null} for none
     */
    public string getCameraModel() {
      return _cameraModel;
    }
    /**
     * The model of the camera used to create the photo.
     * @param cameraModel cameraModel or {@code null} for none
     */
    public ImageMediaMetadataData setCameraModel(string _cameraModel) {
      this._cameraModel = _cameraModel;
      return this;
    }

    /**
     * The color space of the photo.
     * @return value or {@code null} for none
     */
    public string getColorSpace() {
      return _colorSpace;
    }
    /**
     * The color space of the photo.
     * @param colorSpace colorSpace or {@code null} for none
     */
    public ImageMediaMetadataData setColorSpace(string _colorSpace) {
      this._colorSpace = _colorSpace;
      return this;
    }

    /**
     * The exposure bias of the photo (APEX value).
     * @return value or {@code null} for none
     */
    public MyNullable!float getExposureBias() {
      return _exposureBias;
    }
    /**
     * The exposure bias of the photo (APEX value).
     * @param exposureBias exposureBias or {@code null} for none
     */
    public ImageMediaMetadataData setExposureBias(MyNullable!float _exposureBias) {
      this._exposureBias = _exposureBias;
      return this;
    }

    /**
     * The exposure mode used to create the photo.
     * @return value or {@code null} for none
     */
    public string getExposureMode() {
      return _exposureMode;
    }
    /**
     * The exposure mode used to create the photo.
     * @param exposureMode exposureMode or {@code null} for none
     */
    public ImageMediaMetadataData setExposureMode(string _exposureMode) {
      this._exposureMode = _exposureMode;
      return this;
    }

    /**
     * The length of the exposure, in seconds.
     * @return value or {@code null} for none
     */
    public MyNullable!float getExposureTime() {
      return _exposureTime;
    }
    /**
     * The length of the exposure, in seconds.
     * @param exposureTime exposureTime or {@code null} for none
     */
    public ImageMediaMetadataData setExposureTime(MyNullable!float _exposureTime) {
      this._exposureTime = _exposureTime;
      return this;
    }

    /**
     * Whether a flash was used to create the photo.
     * @return value or {@code null} for none
     */
    public Nullable!bool getFlashUsed() {
      return _flashUsed;
    }
    /**
     * Whether a flash was used to create the photo.
     * @param flashUsed flashUsed or {@code null} for none
     */
    public ImageMediaMetadataData setFlashUsed(Nullable!bool _flashUsed) {
      this._flashUsed = _flashUsed;
      return this;
    }

    /**
     * The focal length used to create the photo, in millimeters.
     * @return value or {@code null} for none
     */
    public MyNullable!float getFocalLength() {
      return _focalLength;
    }
    /**
     * The focal length used to create the photo, in millimeters.
     * @param focalLength focalLength or {@code null} for none
     */
    public ImageMediaMetadataData setFocalLength(MyNullable!float _focalLength) {
      this._focalLength = _focalLength;
      return this;
    }

    /**
     * The height of the image in pixels.
     * @return value or {@code null} for none
     */
    public MyNullable!int getHeight() {
      return _height;
    }
    /**
     * The height of the image in pixels.
     * @param height height or {@code null} for none
     */
    public ImageMediaMetadataData setHeight(MyNullable!int _height) {
      this._height = _height;
      return this;
    }

    /**
     * The ISO speed used to create the photo.
     * @return value or {@code null} for none
     */
    public MyNullable!int getIsoSpeed() {
      return _isoSpeed;
    }
    /**
     * The ISO speed used to create the photo.
     * @param isoSpeed isoSpeed or {@code null} for none
     */
    public ImageMediaMetadataData setIsoSpeed(MyNullable!int _isoSpeed) {
      this._isoSpeed = _isoSpeed;
      return this;
    }

    /**
     * The lens used to create the photo.
     * @return value or {@code null} for none
     */
    public string getLens() {
      return _lens;
    }
    /**
     * The lens used to create the photo.
     * @param lens lens or {@code null} for none
     */
    public ImageMediaMetadataData setLens(string _lens) {
      this._lens = _lens;
      return this;
    }

    /**
     * Geographic location information stored in the image.
     * @return value or {@code null} for none
     */
    public LocationData getLocation() {
      return _location;
    }
    /**
     * Geographic location information stored in the image.
     * @param location location or {@code null} for none
     */
    public ImageMediaMetadataData setLocation(LocationData _location) {
      this._location = _location;
      return this;
    }

    /**
     * The smallest f-number of the lens at the focal length used to create the photo (APEX value).
     * @return value or {@code null} for none
     */
    public MyNullable!float getMaxApertureValue() {
      return _maxApertureValue;
    }
    /**
     * The smallest f-number of the lens at the focal length used to create the photo (APEX value).
     * @param maxApertureValue maxApertureValue or {@code null} for none
     */
    public ImageMediaMetadataData setMaxApertureValue(MyNullable!float _maxApertureValue) {
      this._maxApertureValue = _maxApertureValue;
      return this;
    }

    /**
     * The metering mode used to create the photo.
     * @return value or {@code null} for none
     */
    public string getMeteringMode() {
      return _meteringMode;
    }
    /**
     * The metering mode used to create the photo.
     * @param meteringMode meteringMode or {@code null} for none
     */
    public ImageMediaMetadataData setMeteringMode(string _meteringMode) {
      this._meteringMode = _meteringMode;
      return this;
    }

    /**
     * The number of clockwise 90 degree rotations applied from the image's original orientation.
     * @return value or {@code null} for none
     */
    public MyNullable!int getRotation() {
      return _rotation;
    }
    /**
     * The number of clockwise 90 degree rotations applied from the image's original orientation.
     * @param rotation rotation or {@code null} for none
     */
    public ImageMediaMetadataData setRotation(MyNullable!int _rotation) {
      this._rotation = _rotation;
      return this;
    }

    /**
     * The type of sensor used to create the photo.
     * @return value or {@code null} for none
     */
    public string getSensor() {
      return _sensor;
    }
    /**
     * The type of sensor used to create the photo.
     * @param sensor sensor or {@code null} for none
     */
    public ImageMediaMetadataData setSensor(string _sensor) {
      this._sensor = _sensor;
      return this;
    }

    /**
     * The distance to the subject of the photo, in meters.
     * @return value or {@code null} for none
     */
    public MyNullable!int getSubjectDistance() {
      return _subjectDistance;
    }
    /**
     * The distance to the subject of the photo, in meters.
     * @param subjectDistance subjectDistance or {@code null} for none
     */
    public ImageMediaMetadataData setSubjectDistance(MyNullable!int _subjectDistance) {
      this._subjectDistance = _subjectDistance;
      return this;
    }

    /**
     * The date and time the photo was taken (EXIF DateTime).
     * @return value or {@code null} for none
     */
    public string getTime() {
      return _time;
    }
    /**
     * The date and time the photo was taken (EXIF DateTime).
     * @param time time or {@code null} for none
     */
    public ImageMediaMetadataData setTime(string _time) {
      this._time = _time;
      return this;
    }

    /**
     * The white balance mode used to create the photo.
     * @return value or {@code null} for none
     */
    public string getWhiteBalance() {
      return _whiteBalance;
    }
    /**
     * The white balance mode used to create the photo.
     * @param whiteBalance whiteBalance or {@code null} for none
     */
    public ImageMediaMetadataData setWhiteBalance(string _whiteBalance) {
      this._whiteBalance = _whiteBalance;
      return this;
    }

    /**
     * The width of the image in pixels.
     * @return value or {@code null} for none
     */
    public MyNullable!int getWidth() {
      return _width;
    }
    /**
     * The width of the image in pixels.
     * @param width width or {@code null} for none
     */
    public ImageMediaMetadataData setWidth(MyNullable!int _width) {
      this._width = _width;
      return this;
    }

    /**
     * Geographic location information stored in the image.
     */
    public struct LocationData {

      /**
       * The altitude stored in the image.
       * The value may be {@code null}.
       */
      @optional public MyNullable!double _altitude;

      /**
       * The latitude stored in the image.
       * The value may be {@code null}.
       */
      @optional public MyNullable!double _latitude;

      /**
       * The longitude stored in the image.
       * The value may be {@code null}.
       */
      @optional public MyNullable!double _longitude;

      /**
       * The altitude stored in the image.
       * @return value or {@code null} for none
       */
      public MyNullable!double getAltitude() {
        return _altitude;
      }
      /**
       * The altitude stored in the image.
       * @param altitude altitude or {@code null} for none
       */
      public LocationData setAltitude(MyNullable!double _altitude) {
        this._altitude = _altitude;
        return this;
      }

      /**
       * The latitude stored in the image.
       * @return value or {@code null} for none
       */
      public MyNullable!double getLatitude() {
        return _latitude;
      }
      /**
       * The latitude stored in the image.
       * @param latitude latitude or {@code null} for none
       */
      public LocationData setLatitude(MyNullable!double _latitude) {
        this._latitude = _latitude;
        return this;
      }

      /**
       * The longitude stored in the image.
       * @return value or {@code null} for none
       */
      public MyNullable!double getLongitude() {
        return _longitude;
      }
      /**
       * The longitude stored in the image.
       * @param longitude longitude or {@code null} for none
       */
      public LocationData setLongitude(MyNullable!double _longitude) {
        this._longitude = _longitude;
        return this;
      }

    }
  }

  /**
   * Shortcut file details. Only populated for shortcut files, which have the mimeType field set to application/vnd.google-apps.shortcut.
   */
  public struct ShortcutDetailsData {

    /**
     * The ID of the file that this shortcut points to.
     * The value may be {@code null}.
     */
    @optional public string _targetId;

    /**
     * The MIME type of the file that this shortcut points to. The value of this field is a snapshot
     * of the target's MIME type, captured when the shortcut is created.
     * The value may be {@code null}.
     */
    @optional public string _targetMimeType;

    /**
     * The ID of the file that this shortcut points to.
     * @return value or {@code null} for none
     */
    public string getTargetId() {
      return _targetId;
    }
    /**
     * The ID of the file that this shortcut points to.
     * @param targetId targetId or {@code null} for none
     */
    public ShortcutDetailsData setTargetId(string _targetId) {
      this._targetId = _targetId;
      return this;
    }

    /**
     * The MIME type of the file that this shortcut points to. The value of this field is a snapshot
     * of the target's MIME type, captured when the shortcut is created.
     * @return value or {@code null} for none
     */
    public string getTargetMimeType() {
      return _targetMimeType;
    }
    /**
     * The MIME type of the file that this shortcut points to. The value of this field is a snapshot
     * of the target's MIME type, captured when the shortcut is created.
     * @param targetMimeType targetMimeType or {@code null} for none
     */
    public ShortcutDetailsData setTargetMimeType(string _targetMimeType) {
      this._targetMimeType = _targetMimeType;
      return this;
    }

  }

  /**
   * Additional metadata about video media. This may not be available immediately upon upload.
   */
  public struct VideoMediaMetadataData {

    /**
     * The duration of the video in milliseconds.
     * The value may be {@code null}.
     */
    @optional public MyNullable!long _durationMillis;

    /**
     * The height of the video in pixels.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _height;

    /**
     * The width of the video in pixels.
     * The value may be {@code null}.
     */
    @optional public MyNullable!int _width;

    /**
     * The duration of the video in milliseconds.
     * @return value or {@code null} for none
     */
    public MyNullable!long getDurationMillis() {
      return _durationMillis;
    }
    /**
     * The duration of the video in milliseconds.
     * @param durationMillis durationMillis or {@code null} for none
     */
    public VideoMediaMetadataData setDurationMillis(MyNullable!long _durationMillis) {
      this._durationMillis = _durationMillis;
      return this;
    }

    /**
     * The height of the video in pixels.
     * @return value or {@code null} for none
     */
    public MyNullable!int getHeight() {
      return _height;
    }
    /**
     * The height of the video in pixels.
     * @param height height or {@code null} for none
     */
    public VideoMediaMetadataData setHeight(MyNullable!int _height) {
      this._height = _height;
      return this;
    }

    /**
     * The width of the video in pixels.
     * @return value or {@code null} for none
     */
    public MyNullable!int getWidth() {
      return _width;
    }
    /**
     * The width of the video in pixels.
     * @param width width or {@code null} for none
     */
    public VideoMediaMetadataData setWidth(MyNullable!int _width) {
      this._width = _width;
      return this;
    }

  }

}