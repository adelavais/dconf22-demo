/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */
module Google.Apis.Drive.v3.Data.Comment;

import vibe.data.json: optional;
import std.typecons: Nullable;
import std.datetime : SysTime;
import std.conv: to;

import Google.Apis.Drive.v3.DriveMyNullable;

import Google.Apis.Drive.v3.Data.User;
import Google.Apis.Drive.v3.Data.Reply;

/**
 * A comment on a file.
 *
 * This is the D data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Drive API. For a detailed explanation see:
 *
 *
 * @author Robert Aron.
 */
public struct Comment {

  /**
   * A region of the document represented as a JSON string. See anchor documentation for details on
   * how to define and interpret anchor properties.
   * The value may be {@code null}.
   */
  @optional public string _anchor;

  /**
   * The author of the comment. The author's email address and permission ID will not be populated.
   * The value may be {@code null}.
   */
  @optional public User _author;

  /**
   * The plain text content of the comment. This field is used for setting the content, while
   * htmlContent should be displayed.
   * The value may be {@code null}.
   */
  @optional public string _content;

  /**
   * The time at which the comment was created (RFC 3339 date-time).
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _createdTime;

  /**
   * Whether the comment has been deleted. A deleted comment has no content.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _deleted;

  /**
   * The content of the comment with HTML formatting.
   * The value may be {@code null}.
   */
  @optional public string _htmlContent;

  /**
   * The ID of the comment.
   * The value may be {@code null}.
   */
  @optional public string _id;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "drive#comment".
   * The value may be {@code null}.
   */
  @optional public string _kind;

  /**
   * The last time the comment or any of its replies was modified (RFC 3339 date-time).
   * The value may be {@code null}.
   */
  @optional public Nullable!SysTime _modifiedTime;

  /**
   * The file content to which the comment refers, typically within the anchor region. For a text
   * file, for example, this would be the text at the location of the comment.
   * The value may be {@code null}.
   */
  @optional public QuotedFileContentData _quotedFileContent;

  /**
   * The full list of replies to the comment in chronological order.
   * The value may be {@code null}.
   */
  @optional public Reply[] _replies;

  /**
   * Whether the comment has been resolved by one of its replies.
   * The value may be {@code null}.
   */
  @optional public Nullable!bool _resolved;

  /**
   * A region of the document represented as a JSON string. See anchor documentation for details on
   * how to define and interpret anchor properties.
   * @return value or {@code null} for none
   */
  public string getAnchor() {
    return _anchor;
  }
  /**
   * A region of the document represented as a JSON string. See anchor documentation for details on
   * how to define and interpret anchor properties.
   * @param anchor anchor or {@code null} for none
   */
  public Comment setAnchor(string _anchor) {
    this._anchor = _anchor;
    return this;
  }

  /**
   * The author of the comment. The author's email address and permission ID will not be populated.
   * @return value or {@code null} for none
   */
  public User getAuthor() {
    return _author;
  }
  /**
   * The author of the comment. The author's email address and permission ID will not be populated.
   * @param author author or {@code null} for none
   */
  public Comment setAuthor(User _author) {
    this._author = _author;
    return this;
  }

  /**
   * The plain text content of the comment. This field is used for setting the content, while
   * htmlContent should be displayed.
   * @return value or {@code null} for none
   */
  public string getContent() {
    return _content;
  }
  /**
   * The plain text content of the comment. This field is used for setting the content, while
   * htmlContent should be displayed.
   * @param content content or {@code null} for none
   */
  public Comment setContent(string _content) {
    this._content = _content;
    return this;
  }

  /**
   * The time at which the comment was created (RFC 3339 date-time).
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getCreatedTime() {
    return _createdTime;
  }
  /**
   * The time at which the comment was created (RFC 3339 date-time).
   * @param createdTime createdTime or {@code null} for none
   */
  public Comment setCreatedTime(Nullable!SysTime _createdTime) {
    this._createdTime = _createdTime;
    return this;
  }

  /**
   * Whether the comment has been deleted. A deleted comment has no content.
   * @return value or {@code null} for none
   */
  public Nullable!bool getDeleted() {
    return _deleted;
  }
  /**
   * Whether the comment has been deleted. A deleted comment has no content.
   * @param deleted deleted or {@code null} for none
   */
  public Comment setDeleted(Nullable!bool _deleted) {
    this._deleted = _deleted;
    return this;
  }

  /**
   * The content of the comment with HTML formatting.
   * @return value or {@code null} for none
   */
  public string getHtmlContent() {
    return _htmlContent;
  }
  /**
   * The content of the comment with HTML formatting.
   * @param htmlContent htmlContent or {@code null} for none
   */
  public Comment setHtmlContent(string _htmlContent) {
    this._htmlContent = _htmlContent;
    return this;
  }

  /**
   * The ID of the comment.
   * @return value or {@code null} for none
   */
  public string getId() {
    return _id;
  }
  /**
   * The ID of the comment.
   * @param id id or {@code null} for none
   */
  public Comment setId(string _id) {
    this._id = _id;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string "drive#comment".
   * @return value or {@code null} for none
   */
  public string getKind() {
    return _kind;
  }
  /**
   * Identifies what kind of resource this is. Value: the fixed string "drive#comment".
   * @param kind kind or {@code null} for none
   */
  public Comment setKind(string _kind) {
    this._kind = _kind;
    return this;
  }

  /**
   * The last time the comment or any of its replies was modified (RFC 3339 date-time).
   * @return value or {@code null} for none
   */
  public Nullable!SysTime getModifiedTime() {
    return _modifiedTime;
  }
  /**
   * The last time the comment or any of its replies was modified (RFC 3339 date-time).
   * @param modifiedTime modifiedTime or {@code null} for none
   */
  public Comment setModifiedTime(Nullable!SysTime _modifiedTime) {
    this._modifiedTime = _modifiedTime;
    return this;
  }

  /**
   * The file content to which the comment refers, typically within the anchor region. For a text
   * file, for example, this would be the text at the location of the comment.
   * @return value or {@code null} for none
   */
  public QuotedFileContentData getQuotedFileContent() {
    return _quotedFileContent;
  }
  /**
   * The file content to which the comment refers, typically within the anchor region. For a text
   * file, for example, this would be the text at the location of the comment.
   * @param quotedFileContent quotedFileContent or {@code null} for none
   */
  public Comment setQuotedFileContent(QuotedFileContentData _quotedFileContent) {
    this._quotedFileContent = _quotedFileContent;
    return this;
  }

  /**
   * The full list of replies to the comment in chronological order.
   * @return value or {@code null} for none
   */
  public Reply[] getReplies() {
    return _replies;
  }
  /**
   * The full list of replies to the comment in chronological order.
   * @param replies replies or {@code null} for none
   */
  public Comment setReplies(Reply[] _replies) {
    this._replies = _replies;
    return this;
  }

  /**
   * Whether the comment has been resolved by one of its replies.
   * @return value or {@code null} for none
   */
  public Nullable!bool getResolved() {
    return _resolved;
  }
  /**
   * Whether the comment has been resolved by one of its replies.
   * @param resolved resolved or {@code null} for none
   */
  public Comment setResolved(Nullable!bool _resolved) {
    this._resolved = _resolved;
    return this;
  }

  /**
   * The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
   */
  public struct QuotedFileContentData {

    /**
     * The MIME type of the quoted content.
     * The value may be {@code null}.
     */
    @optional public string _mimeType;

    /**
     * The quoted content itself. This is interpreted as plain text if set through the API.
     * The value may be {@code null}.
     */
    @optional public string _value;

    /**
     * The MIME type of the quoted content.
     * @return value or {@code null} for none
     */
    public string getMimeType() {
      return _mimeType;
    }
    /**
     * The MIME type of the quoted content.
     * @param mimeType mimeType or {@code null} for none
     */
    public QuotedFileContentData setMimeType(string _mimeType) {
      this._mimeType = _mimeType;
      return this;
    }

    /**
     * The quoted content itself. This is interpreted as plain text if set through the API.
     * @return value or {@code null} for none
     */
    public string getValue() {
      return _value;
    }
    /**
     * The quoted content itself. This is interpreted as plain text if set through the API.
     * @param value value or {@code null} for none
     */
    public QuotedFileContentData setValue(string _value) {
      this._value = _value;
      return this;
    }

  }

}